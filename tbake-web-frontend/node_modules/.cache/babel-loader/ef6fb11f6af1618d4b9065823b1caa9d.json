{"ast":null,"code":"var _jsxFileName = \"/Users/danialfajar/Downloads/tbake-web-staking-platform-master/src/views/Pools/components/PoolCard/CardActions/HarvestActions.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Flex, Text, Button, Heading, useModal, Skeleton } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { getFullDisplayBalance, getBalanceNumber, formatNumber } from 'utils/formatBalance';\nimport Balance from 'components/Balance';\nimport CollectModal from '../Modals/CollectModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst HarvestActions = ({\n  earnings,\n  earningToken,\n  sousId,\n  isBnbPool,\n  earningTokenPrice,\n  isLoading = false\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals);\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3);\n  const earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals);\n  const earningsDollarValue = formatNumber(earningTokenDollarBalance);\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals);\n  const hasEarnings = earnings.toNumber() > 0;\n  const isCompoundPool = sousId === 0;\n  const [onPresentCollect] = useModal( /*#__PURE__*/_jsxDEV(CollectModal, {\n    formattedBalance: formattedBalance,\n    fullBalance: fullBalance,\n    earningToken: earningToken,\n    earningsDollarValue: earningsDollarValue,\n    sousId: sousId,\n    isBnbPool: isBnbPool,\n    isCompoundPool: isCompoundPool\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    flexDirection: \"column\",\n    mb: \"16px\",\n    children: /*#__PURE__*/_jsxDEV(Flex, {\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        flexDirection: \"column\",\n        children: isLoading ? /*#__PURE__*/_jsxDEV(Skeleton, {\n          width: \"80px\",\n          height: \"48px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [hasEarnings ? /*#__PURE__*/_jsxDEV(Balance, {\n            bold: true,\n            fontSize: \"20px\",\n            decimals: 5,\n            value: earningTokenBalance\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(Heading, {\n            color: \"textDisabled\",\n            children: \"0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 17\n          }, this), earningTokenPrice !== 0 && /*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"12px\",\n            color: hasEarnings ? 'textSubtle' : 'textDisabled',\n            children: [\"~\", hasEarnings ? /*#__PURE__*/_jsxDEV(Balance, {\n              display: \"inline\",\n              fontSize: \"12px\",\n              color: \"textSubtle\",\n              decimals: 2,\n              value: earningTokenDollarBalance,\n              unit: \" USD\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 21\n            }, this) : '0 USD']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          disabled: !hasEarnings,\n          onClick: onPresentCollect,\n          children: isCompoundPool ? t('Collect') : t('Harvest')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HarvestActions, \"Z61VsLnZIUqiVnKiqd73JIjC0QQ=\", false, function () {\n  return [useTranslation, useModal];\n});\n\n_c = HarvestActions;\nexport default HarvestActions;\n\nvar _c;\n\n$RefreshReg$(_c, \"HarvestActions\");","map":{"version":3,"sources":["/Users/danialfajar/Downloads/tbake-web-staking-platform-master/src/views/Pools/components/PoolCard/CardActions/HarvestActions.tsx"],"names":["React","Flex","Text","Button","Heading","useModal","Skeleton","useTranslation","getFullDisplayBalance","getBalanceNumber","formatNumber","Balance","CollectModal","HarvestActions","earnings","earningToken","sousId","isBnbPool","earningTokenPrice","isLoading","t","earningTokenBalance","decimals","formattedBalance","earningTokenDollarBalance","multipliedBy","earningsDollarValue","fullBalance","hasEarnings","toNumber","isCompoundPool","onPresentCollect"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,MAArB,EAA6BC,OAA7B,EAAsCC,QAAtC,EAAgDC,QAAhD,QAAgE,oBAAhE;AAGA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,qBAAT,EAAgCC,gBAAhC,EAAkDC,YAAlD,QAAsE,qBAAtE;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;;;;AAWA,MAAMC,cAA6C,GAAG,CAAC;AACrDC,EAAAA,QADqD;AAErDC,EAAAA,YAFqD;AAGrDC,EAAAA,MAHqD;AAIrDC,EAAAA,SAJqD;AAKrDC,EAAAA,iBALqD;AAMrDC,EAAAA,SAAS,GAAG;AANyC,CAAD,KAOhD;AAAA;;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAQb,cAAc,EAA5B;AACA,QAAMc,mBAAmB,GAAGZ,gBAAgB,CAACK,QAAD,EAAWC,YAAY,CAACO,QAAxB,CAA5C;AACA,QAAMC,gBAAgB,GAAGb,YAAY,CAACW,mBAAD,EAAsB,CAAtB,EAAyB,CAAzB,CAArC;AAEA,QAAMG,yBAAyB,GAAGf,gBAAgB,CAACK,QAAQ,CAACW,YAAT,CAAsBP,iBAAtB,CAAD,EAA2CH,YAAY,CAACO,QAAxD,CAAlD;AACA,QAAMI,mBAAmB,GAAGhB,YAAY,CAACc,yBAAD,CAAxC;AAEA,QAAMG,WAAW,GAAGnB,qBAAqB,CAACM,QAAD,EAAWC,YAAY,CAACO,QAAxB,CAAzC;AACA,QAAMM,WAAW,GAAGd,QAAQ,CAACe,QAAT,KAAsB,CAA1C;AACA,QAAMC,cAAc,GAAGd,MAAM,KAAK,CAAlC;AAEA,QAAM,CAACe,gBAAD,IAAqB1B,QAAQ,eACjC,QAAC,YAAD;AACE,IAAA,gBAAgB,EAAEkB,gBADpB;AAEE,IAAA,WAAW,EAAEI,WAFf;AAGE,IAAA,YAAY,EAAEZ,YAHhB;AAIE,IAAA,mBAAmB,EAAEW,mBAJvB;AAKE,IAAA,MAAM,EAAEV,MALV;AAME,IAAA,SAAS,EAAEC,SANb;AAOE,IAAA,cAAc,EAAEa;AAPlB;AAAA;AAAA;AAAA;AAAA,UADiC,CAAnC;AAYA,sBACE,QAAC,IAAD;AAAM,IAAA,aAAa,EAAC,QAApB;AAA6B,IAAA,EAAE,EAAC,MAAhC;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,cAAc,EAAC,eAArB;AAAqC,MAAA,UAAU,EAAC,QAAhD;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,aAAa,EAAC,QAApB;AAAA,kBACGX,SAAS,gBACR,QAAC,QAAD;AAAU,UAAA,KAAK,EAAC,MAAhB;AAAuB,UAAA,MAAM,EAAC;AAA9B;AAAA;AAAA;AAAA;AAAA,gBADQ,gBAGR;AAAA,qBACGS,WAAW,gBACV,QAAC,OAAD;AAAS,YAAA,IAAI,MAAb;AAAc,YAAA,QAAQ,EAAC,MAAvB;AAA8B,YAAA,QAAQ,EAAE,CAAxC;AAA2C,YAAA,KAAK,EAAEP;AAAlD;AAAA;AAAA;AAAA;AAAA,kBADU,gBAGV,QAAC,OAAD;AAAS,YAAA,KAAK,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJJ,EAMGH,iBAAiB,KAAK,CAAtB,iBACC,QAAC,IAAD;AAAM,YAAA,QAAQ,EAAC,MAAf;AAAsB,YAAA,KAAK,EAAEU,WAAW,GAAG,YAAH,GAAkB,cAA1D;AAAA,4BAEGA,WAAW,gBACV,QAAC,OAAD;AACE,cAAA,OAAO,EAAC,QADV;AAEE,cAAA,QAAQ,EAAC,MAFX;AAGE,cAAA,KAAK,EAAC,YAHR;AAIE,cAAA,QAAQ,EAAE,CAJZ;AAKE,cAAA,KAAK,EAAEJ,yBALT;AAME,cAAA,IAAI,EAAC;AANP;AAAA;AAAA;AAAA;AAAA,oBADU,GAUV,OAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPJ;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,cADF,eA+BE,QAAC,IAAD;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,QAAQ,EAAE,CAACI,WAAnB;AAAgC,UAAA,OAAO,EAAEG,gBAAzC;AAAA,oBACGD,cAAc,GAAGV,CAAC,CAAC,SAAD,CAAJ,GAAkBA,CAAC,CAAC,SAAD;AADpC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cA/BF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAyCD,CAxED;;GAAMP,c;UAQUN,c,EAWaF,Q;;;KAnBvBQ,c;AA0EN,eAAeA,cAAf","sourcesContent":["import React from 'react'\nimport { Flex, Text, Button, Heading, useModal, Skeleton } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { Token } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance, getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport CollectModal from '../Modals/CollectModal'\n\ninterface HarvestActionsProps {\n  earnings: BigNumber\n  earningToken: Token\n  sousId: number\n  earningTokenPrice: number\n  isBnbPool: boolean\n  isLoading?: boolean\n}\n\nconst HarvestActions: React.FC<HarvestActionsProps> = ({\n  earnings,\n  earningToken,\n  sousId,\n  isBnbPool,\n  earningTokenPrice,\n  isLoading = false,\n}) => {\n  const { t } = useTranslation()\n  const earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\n\n  const earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\n  const earningsDollarValue = formatNumber(earningTokenDollarBalance)\n\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\n  const hasEarnings = earnings.toNumber() > 0\n  const isCompoundPool = sousId === 0\n\n  const [onPresentCollect] = useModal(\n    <CollectModal\n      formattedBalance={formattedBalance}\n      fullBalance={fullBalance}\n      earningToken={earningToken}\n      earningsDollarValue={earningsDollarValue}\n      sousId={sousId}\n      isBnbPool={isBnbPool}\n      isCompoundPool={isCompoundPool}\n    />,\n  )\n\n  return (\n    <Flex flexDirection=\"column\" mb=\"16px\">\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Flex flexDirection=\"column\">\n          {isLoading ? (\n            <Skeleton width=\"80px\" height=\"48px\" />\n          ) : (\n            <>\n              {hasEarnings ? (\n                <Balance bold fontSize=\"20px\" decimals={5} value={earningTokenBalance} />\n              ) : (\n                <Heading color=\"textDisabled\">0</Heading>\n              )}\n              {earningTokenPrice !== 0 && (\n                <Text fontSize=\"12px\" color={hasEarnings ? 'textSubtle' : 'textDisabled'}>\n                  ~\n                  {hasEarnings ? (\n                    <Balance\n                      display=\"inline\"\n                      fontSize=\"12px\"\n                      color=\"textSubtle\"\n                      decimals={2}\n                      value={earningTokenDollarBalance}\n                      unit=\" USD\"\n                    />\n                  ) : (\n                    '0 USD'\n                  )}\n                </Text>\n              )}\n            </>\n          )}\n        </Flex>\n        <Flex>\n          <Button disabled={!hasEarnings} onClick={onPresentCollect}>\n            {isCompoundPool ? t('Collect') : t('Harvest')}\n          </Button>\n        </Flex>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default HarvestActions\n"]},"metadata":{},"sourceType":"module"}