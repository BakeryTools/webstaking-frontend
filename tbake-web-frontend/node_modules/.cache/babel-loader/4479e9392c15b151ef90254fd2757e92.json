{"ast":null,"code":"var _jsxFileName = \"/Users/danialfajar/Downloads/tbake-web-staking-platform-master/src/views/Pools/components/CakeVaultCard/VaultStakeModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { useWeb3React } from '@web3-react/core';\nimport { BASE_EXCHANGE_URL } from 'config';\nimport { useAppDispatch } from 'state';\nimport { BIG_TEN } from 'utils/bigNumber';\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks';\nimport { useCakeVaultContract } from 'hooks/useContract';\nimport useTheme from 'hooks/useTheme';\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer';\nimport BigNumber from 'bignumber.js';\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance';\nimport useToast from 'hooks/useToast';\nimport { fetchCakeVaultUserData } from 'state/pools';\nimport { convertCakeToShares } from '../../helpers';\nimport FeeSummary from './FeeSummary';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`;\n_c = StyledButton;\n\nconst VaultStakeModal = ({\n  pool,\n  stakingMax,\n  isRemovingStake = false,\n  onDismiss\n}) => {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const {\n    stakingToken\n  } = pool;\n  const {\n    account\n  } = useWeb3React();\n  const cakeVaultContract = useCakeVaultContract();\n  const {\n    userData: {\n      lastDepositedTime,\n      userShares\n    },\n    pricePerFullShare\n  } = useCakeVault();\n  const {\n    t\n  } = useTranslation();\n  const {\n    theme\n  } = useTheme();\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const [pendingTx, setPendingTx] = useState(false);\n  const [stakeAmount, setStakeAmount] = useState('');\n  const [percent, setPercent] = useState(0);\n  const {\n    hasUnstakingFee\n  } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares);\n  const cakePriceBusd = usePriceCakeBusd();\n  const usdValueStaked = cakePriceBusd.gt(0) && stakeAmount ? formatNumber(new BigNumber(stakeAmount).times(cakePriceBusd).toNumber()) : '';\n\n  const handleStakeInputChange = input => {\n    if (input) {\n      const convertedInput = new BigNumber(input).multipliedBy(BIG_TEN.pow(stakingToken.decimals));\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber());\n      setPercent(percentage > 100 ? 100 : percentage);\n    } else {\n      setPercent(0);\n    }\n\n    setStakeAmount(input);\n  };\n\n  const handleChangePercent = sliderPercent => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent);\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals);\n      setStakeAmount(amountToStake);\n    } else {\n      setStakeAmount('');\n    }\n\n    setPercent(sliderPercent);\n  };\n\n  const handleWithdrawal = async convertedStakeAmount => {\n    setPendingTx(true);\n    const shareStakeToWithdraw = convertCakeToShares(convertedStakeAmount, pricePerFullShare); // trigger withdrawAll function if the withdrawal will leave 0.000001 CAKE or less\n\n    const triggerWithdrawAllThreshold = new BigNumber(1000000000000);\n    const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber);\n    const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold);\n\n    if (isWithdrawingAll) {\n      cakeVaultContract.methods.withdrawAll().send({\n        from: account\n      }).on('sending', () => {\n        setPendingTx(true);\n      }).on('receipt', () => {\n        toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'));\n        setPendingTx(false);\n        onDismiss();\n        dispatch(fetchCakeVaultUserData({\n          account\n        }));\n      }).on('error', error => {\n        console.error(error); // Remove message from toast before prod\n\n        toastError(t('Error'), t('%error% - Please try again.', {\n          error: error.message\n        }));\n        setPendingTx(false);\n      });\n    } else {\n      cakeVaultContract.methods.withdraw(shareStakeToWithdraw.sharesAsBigNumber.toString()) // .toString() being called to fix a BigNumber error in prod\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n      .send({\n        from: account\n      }).on('sending', () => {\n        setPendingTx(true);\n      }).on('receipt', () => {\n        toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'));\n        setPendingTx(false);\n        onDismiss();\n        dispatch(fetchCakeVaultUserData({\n          account\n        }));\n      }).on('error', error => {\n        console.error(error); // Remove message from toast before prod\n\n        toastError(t('Error'), t('%error% - Please try again.', {\n          error: error.message\n        }));\n        setPendingTx(false);\n      });\n    }\n  };\n\n  const handleDeposit = async convertedStakeAmount => {\n    cakeVaultContract.methods.deposit(convertedStakeAmount.toString()) // .toString() being called to fix a BigNumber error in prod\n    // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n    .send({\n      from: account\n    }).on('sending', () => {\n      setPendingTx(true);\n    }).on('receipt', () => {\n      toastSuccess(t('Staked!'), t('Your funds have been staked in the pool'));\n      setPendingTx(false);\n      onDismiss();\n      dispatch(fetchCakeVaultUserData({\n        account\n      }));\n    }).on('error', error => {\n      console.error(error); // Remove message from toast before prod\n\n      toastError(t('Error'), t('%error% - Please try again.', {\n        error: error.message\n      }));\n      setPendingTx(false);\n    });\n  };\n\n  const handleConfirmClick = async () => {\n    const convertedStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals);\n    setPendingTx(true); // unstaking\n\n    if (isRemovingStake) {\n      handleWithdrawal(convertedStakeAmount); // staking\n    } else {\n      handleDeposit(convertedStakeAmount);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: isRemovingStake ? t('Unstake') : t('Stake in Pool'),\n    onDismiss: onDismiss,\n    headerBackground: theme.colors.gradients.cardHeader,\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      mb: \"8px\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        children: [isRemovingStake ? t('Unstake') : t('Stake'), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        minWidth: \"70px\",\n        children: [/*#__PURE__*/_jsxDEV(Image, {\n          src: `/images/tokens/${stakingToken.symbol}.png`,\n          width: 24,\n          height: 24,\n          alt: stakingToken.symbol\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          ml: \"4px\",\n          bold: true,\n          children: stakingToken.symbol\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BalanceInput, {\n      value: stakeAmount,\n      onUserInput: handleStakeInputChange,\n      currencyValue: cakePriceBusd.gt(0) && `~${usdValueStaked || 0} USD`,\n      decimals: stakingToken.decimals\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      mt: \"8px\",\n      ml: \"auto\",\n      color: \"textSubtle\",\n      fontSize: \"12px\",\n      mb: \"8px\",\n      children: t('Balance: %balance%', {\n        balance: getFullDisplayBalance(stakingMax, stakingToken.decimals)\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Slider, {\n      min: 0,\n      max: 100,\n      value: percent,\n      onValueChanged: handleChangePercent,\n      name: \"stake\",\n      valueLabel: `${percent}%`,\n      step: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      mt: \"8px\",\n      children: [/*#__PURE__*/_jsxDEV(StyledButton, {\n        scale: \"xs\",\n        mx: \"2px\",\n        p: \"4px 16px\",\n        variant: \"tertiary\",\n        onClick: () => handleChangePercent(25),\n        children: \"25%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledButton, {\n        scale: \"xs\",\n        mx: \"2px\",\n        p: \"4px 16px\",\n        variant: \"tertiary\",\n        onClick: () => handleChangePercent(50),\n        children: \"50%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledButton, {\n        scale: \"xs\",\n        mx: \"2px\",\n        p: \"4px 16px\",\n        variant: \"tertiary\",\n        onClick: () => handleChangePercent(75),\n        children: \"75%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledButton, {\n        scale: \"xs\",\n        mx: \"2px\",\n        p: \"4px 16px\",\n        variant: \"tertiary\",\n        onClick: () => handleChangePercent(100),\n        children: t('Max')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), isRemovingStake && hasUnstakingFee && /*#__PURE__*/_jsxDEV(FeeSummary, {\n      stakingTokenSymbol: stakingToken.symbol,\n      stakeAmount: stakeAmount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      isLoading: pendingTx,\n      endIcon: pendingTx ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n        spin: true,\n        color: \"currentColor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 30\n      }, this) : null,\n      onClick: handleConfirmClick,\n      disabled: !stakeAmount || parseFloat(stakeAmount) === 0,\n      mt: \"24px\",\n      children: pendingTx ? t('Confirming') : t('Confirm')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), !isRemovingStake && /*#__PURE__*/_jsxDEV(Button, {\n      mt: \"8px\",\n      as: \"a\",\n      external: true,\n      href: BASE_EXCHANGE_URL,\n      variant: \"secondary\",\n      children: t('Get %symbol%', {\n        symbol: stakingToken.symbol\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n};\n\n_s(VaultStakeModal, \"iU4rRj4bzrYDEbaC11lN/VX2Ylg=\", false, function () {\n  return [useAppDispatch, useWeb3React, useCakeVaultContract, useCakeVault, useTranslation, useTheme, useToast, useWithdrawalFeeTimer, usePriceCakeBusd];\n});\n\n_c2 = VaultStakeModal;\nexport default VaultStakeModal;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledButton\");\n$RefreshReg$(_c2, \"VaultStakeModal\");","map":{"version":3,"sources":["/Users/danialfajar/Downloads/tbake-web-staking-platform-master/src/views/Pools/components/CakeVaultCard/VaultStakeModal.tsx"],"names":["React","useState","styled","Modal","Text","Flex","Image","Button","Slider","BalanceInput","AutoRenewIcon","useTranslation","useWeb3React","BASE_EXCHANGE_URL","useAppDispatch","BIG_TEN","useCakeVault","usePriceCakeBusd","useCakeVaultContract","useTheme","useWithdrawalFeeTimer","BigNumber","getFullDisplayBalance","formatNumber","getDecimalAmount","useToast","fetchCakeVaultUserData","convertCakeToShares","FeeSummary","StyledButton","VaultStakeModal","pool","stakingMax","isRemovingStake","onDismiss","dispatch","stakingToken","account","cakeVaultContract","userData","lastDepositedTime","userShares","pricePerFullShare","t","theme","toastSuccess","toastError","pendingTx","setPendingTx","stakeAmount","setStakeAmount","percent","setPercent","hasUnstakingFee","parseInt","cakePriceBusd","usdValueStaked","gt","times","toNumber","handleStakeInputChange","input","convertedInput","multipliedBy","pow","decimals","percentage","Math","floor","dividedBy","handleChangePercent","sliderPercent","percentageOfStakingMax","amountToStake","handleWithdrawal","convertedStakeAmount","shareStakeToWithdraw","triggerWithdrawAllThreshold","sharesRemaining","minus","sharesAsBigNumber","isWithdrawingAll","lte","methods","withdrawAll","send","from","on","error","console","message","withdraw","toString","handleDeposit","deposit","handleConfirmClick","colors","gradients","cardHeader","symbol","balance","parseFloat"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport { BASE_EXCHANGE_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport { BIG_TEN } from 'utils/bigNumber'\nimport { useCakeVault, usePriceCakeBusd } from 'state/hooks'\nimport { useCakeVaultContract } from 'hooks/useContract'\nimport useTheme from 'hooks/useTheme'\nimport useWithdrawalFeeTimer from 'hooks/cakeVault/useWithdrawalFeeTimer'\nimport BigNumber from 'bignumber.js'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { fetchCakeVaultUserData } from 'state/pools'\nimport { Pool } from 'state/types'\nimport { convertCakeToShares } from '../../helpers'\nimport FeeSummary from './FeeSummary'\n\ninterface VaultStakeModalProps {\n  pool: Pool\n  stakingMax: BigNumber\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n}\n\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`\n\nconst VaultStakeModal: React.FC<VaultStakeModalProps> = ({ pool, stakingMax, isRemovingStake = false, onDismiss }) => {\n  const dispatch = useAppDispatch()\n  const { stakingToken } = pool\n  const { account } = useWeb3React()\n  const cakeVaultContract = useCakeVaultContract()\n  const {\n    userData: { lastDepositedTime, userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [percent, setPercent] = useState(0)\n  const { hasUnstakingFee } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares)\n  const cakePriceBusd = usePriceCakeBusd()\n  const usdValueStaked =\n    cakePriceBusd.gt(0) && stakeAmount ? formatNumber(new BigNumber(stakeAmount).times(cakePriceBusd).toNumber()) : ''\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = new BigNumber(input).multipliedBy(BIG_TEN.pow(stakingToken.decimals))\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber())\n      setPercent(percentage > 100 ? 100 : percentage)\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  const handleWithdrawal = async (convertedStakeAmount: BigNumber) => {\n    setPendingTx(true)\n    const shareStakeToWithdraw = convertCakeToShares(convertedStakeAmount, pricePerFullShare)\n    // trigger withdrawAll function if the withdrawal will leave 0.000001 CAKE or less\n    const triggerWithdrawAllThreshold = new BigNumber(1000000000000)\n    const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber)\n    const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold)\n\n    if (isWithdrawingAll) {\n      cakeVaultContract.methods\n        .withdrawAll()\n        .send({ from: account })\n        .on('sending', () => {\n          setPendingTx(true)\n        })\n        .on('receipt', () => {\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n          setPendingTx(false)\n          onDismiss()\n          dispatch(fetchCakeVaultUserData({ account }))\n        })\n        .on('error', (error) => {\n          console.error(error)\n          // Remove message from toast before prod\n          toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n          setPendingTx(false)\n        })\n    } else {\n      cakeVaultContract.methods\n        .withdraw(shareStakeToWithdraw.sharesAsBigNumber.toString())\n        // .toString() being called to fix a BigNumber error in prod\n        // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n        .send({ from: account })\n        .on('sending', () => {\n          setPendingTx(true)\n        })\n        .on('receipt', () => {\n          toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n          setPendingTx(false)\n          onDismiss()\n          dispatch(fetchCakeVaultUserData({ account }))\n        })\n        .on('error', (error) => {\n          console.error(error)\n          // Remove message from toast before prod\n          toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n          setPendingTx(false)\n        })\n    }\n  }\n\n  const handleDeposit = async (convertedStakeAmount: BigNumber) => {\n    cakeVaultContract.methods\n      .deposit(convertedStakeAmount.toString())\n      // .toString() being called to fix a BigNumber error in prod\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n      .send({ from: account })\n      .on('sending', () => {\n        setPendingTx(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(t('Staked!'), t('Your funds have been staked in the pool'))\n        setPendingTx(false)\n        onDismiss()\n        dispatch(fetchCakeVaultUserData({ account }))\n      })\n      .on('error', (error) => {\n        console.error(error)\n        // Remove message from toast before prod\n        toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n        setPendingTx(false)\n      })\n  }\n\n  const handleConfirmClick = async () => {\n    const convertedStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n    setPendingTx(true)\n    // unstaking\n    if (isRemovingStake) {\n      handleWithdrawal(convertedStakeAmount)\n      // staking\n    } else {\n      handleDeposit(convertedStakeAmount)\n    }\n  }\n\n  return (\n    <Modal\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Image src={`/images/tokens/${stakingToken.symbol}.png`} width={24} height={24} alt={stakingToken.symbol} />\n          <Text ml=\"4px\" bold>\n            {stakingToken.symbol}\n          </Text>\n        </Flex>\n      </Flex>\n      <BalanceInput\n        value={stakeAmount}\n        onUserInput={handleStakeInputChange}\n        currencyValue={cakePriceBusd.gt(0) && `~${usdValueStaked || 0} USD`}\n        decimals={stakingToken.decimals}\n      />\n      <Text mt=\"8px\" ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n        {t('Balance: %balance%', { balance: getFullDisplayBalance(stakingMax, stakingToken.decimals) })}\n      </Text>\n      <Slider\n        min={0}\n        max={100}\n        value={percent}\n        onValueChanged={handleChangePercent}\n        name=\"stake\"\n        valueLabel={`${percent}%`}\n        step={1}\n      />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(25)}>\n          25%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(50)}>\n          50%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(75)}>\n          75%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(100)}>\n          {t('Max')}\n        </StyledButton>\n      </Flex>\n      {isRemovingStake && hasUnstakingFee && (\n        <FeeSummary stakingTokenSymbol={stakingToken.symbol} stakeAmount={stakeAmount} />\n      )}\n      <Button\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        onClick={handleConfirmClick}\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0}\n        mt=\"24px\"\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      {!isRemovingStake && (\n        <Button mt=\"8px\" as=\"a\" external href={BASE_EXCHANGE_URL} variant=\"secondary\">\n          {t('Get %symbol%', { symbol: stakingToken.symbol })}\n        </Button>\n      )}\n    </Modal>\n  )\n}\n\nexport default VaultStakeModal\n"]},"metadata":{},"sourceType":"module"}