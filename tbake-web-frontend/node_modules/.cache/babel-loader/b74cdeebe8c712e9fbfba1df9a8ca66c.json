{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { useAppDispatch } from 'state';\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions';\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers';\nimport { useMasterchef, useSousChef } from './useContract';\n\nconst useStake = pid => {\n  _s();\n\n  const {\n    account\n  } = useWeb3React();\n  const masterChefContract = useMasterchef();\n  const handleStake = useCallback(async amount => {\n    const txHash = await stake(masterChefContract, pid, amount, account);\n    console.info(txHash);\n  }, [account, masterChefContract, pid]);\n  return {\n    onStake: handleStake\n  };\n};\n\n_s(useStake, \"SHa/nkwQd1cKWqL9VNw6Y7PwMxg=\", false, function () {\n  return [useWeb3React, useMasterchef];\n});\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  _s2();\n\n  const dispatch = useAppDispatch();\n  const {\n    account\n  } = useWeb3React();\n  const masterChefContract = useMasterchef();\n  const sousChefContract = useSousChef(sousId);\n  const handleStake = useCallback(async (amount, decimals) => {\n    if (sousId === 0) {\n      await stake(masterChefContract, 0, amount, account);\n    } else if (isUsingBnb) {\n      await sousStakeBnb(sousChefContract, amount, account);\n    } else {\n      await sousStake(sousChefContract, amount, decimals, account);\n    }\n\n    dispatch(updateUserStakedBalance(sousId, account));\n    dispatch(updateUserBalance(sousId, account));\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId]);\n  return {\n    onStake: handleStake\n  };\n};\n\n_s2(useSousStake, \"vpe8vSSPvb8ajwzF6csd4rEGZXU=\", false, function () {\n  return [useAppDispatch, useWeb3React, useMasterchef, useSousChef];\n});\n\nexport default useStake;","map":{"version":3,"sources":["/Users/danialfajar/Downloads/tbake-web-staking-platform-master/src/hooks/useStake.ts"],"names":["useCallback","useWeb3React","useAppDispatch","updateUserStakedBalance","updateUserBalance","stake","sousStake","sousStakeBnb","useMasterchef","useSousChef","useStake","pid","account","masterChefContract","handleStake","amount","txHash","console","info","onStake","useSousStake","sousId","isUsingBnb","dispatch","sousChefContract","decimals"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,cAAT,QAA+B,OAA/B;AACA,SAASC,uBAAT,EAAkCC,iBAAlC,QAA2D,eAA3D;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,YAA3B,QAA+C,mBAA/C;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,eAA3C;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAiB;AAAA;;AAChC,QAAM;AAAEC,IAAAA;AAAF,MAAcX,YAAY,EAAhC;AACA,QAAMY,kBAAkB,GAAGL,aAAa,EAAxC;AAEA,QAAMM,WAAW,GAAGd,WAAW,CAC7B,MAAOe,MAAP,IAA0B;AACxB,UAAMC,MAAM,GAAG,MAAMX,KAAK,CAACQ,kBAAD,EAAqBF,GAArB,EAA0BI,MAA1B,EAAkCH,OAAlC,CAA1B;AACAK,IAAAA,OAAO,CAACC,IAAR,CAAaF,MAAb;AACD,GAJ4B,EAK7B,CAACJ,OAAD,EAAUC,kBAAV,EAA8BF,GAA9B,CAL6B,CAA/B;AAQA,SAAO;AAAEQ,IAAAA,OAAO,EAAEL;AAAX,GAAP;AACD,CAbD;;GAAMJ,Q;UACgBT,Y,EACOO,a;;;AAa7B,OAAO,MAAMY,YAAY,GAAG,CAACC,MAAD,EAAiBC,UAAU,GAAG,KAA9B,KAAwC;AAAA;;AAClE,QAAMC,QAAQ,GAAGrB,cAAc,EAA/B;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAcX,YAAY,EAAhC;AACA,QAAMY,kBAAkB,GAAGL,aAAa,EAAxC;AACA,QAAMgB,gBAAgB,GAAGf,WAAW,CAACY,MAAD,CAApC;AAEA,QAAMP,WAAW,GAAGd,WAAW,CAC7B,OAAOe,MAAP,EAAuBU,QAAvB,KAA4C;AAC1C,QAAIJ,MAAM,KAAK,CAAf,EAAkB;AAChB,YAAMhB,KAAK,CAACQ,kBAAD,EAAqB,CAArB,EAAwBE,MAAxB,EAAgCH,OAAhC,CAAX;AACD,KAFD,MAEO,IAAIU,UAAJ,EAAgB;AACrB,YAAMf,YAAY,CAACiB,gBAAD,EAAmBT,MAAnB,EAA2BH,OAA3B,CAAlB;AACD,KAFM,MAEA;AACL,YAAMN,SAAS,CAACkB,gBAAD,EAAmBT,MAAnB,EAA2BU,QAA3B,EAAqCb,OAArC,CAAf;AACD;;AACDW,IAAAA,QAAQ,CAACpB,uBAAuB,CAACkB,MAAD,EAAST,OAAT,CAAxB,CAAR;AACAW,IAAAA,QAAQ,CAACnB,iBAAiB,CAACiB,MAAD,EAAST,OAAT,CAAlB,CAAR;AACD,GAX4B,EAY7B,CAACA,OAAD,EAAUW,QAAV,EAAoBD,UAApB,EAAgCT,kBAAhC,EAAoDW,gBAApD,EAAsEH,MAAtE,CAZ6B,CAA/B;AAeA,SAAO;AAAEF,IAAAA,OAAO,EAAEL;AAAX,GAAP;AACD,CAtBM;;IAAMM,Y;UACMlB,c,EACGD,Y,EACOO,a,EACFC,W;;;AAoB3B,eAAeC,QAAf","sourcesContent":["import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId: number, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, decimals, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n"]},"metadata":{},"sourceType":"module"}