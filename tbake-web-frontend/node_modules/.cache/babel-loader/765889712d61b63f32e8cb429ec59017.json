{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { ethers } from 'ethers';\nimport BigNumber from 'bignumber.js';\nimport { useAppDispatch } from 'state';\nimport { updateUserAllowance } from 'state/actions';\nimport { approve } from 'utils/callHelpers';\nimport { useTranslation } from 'contexts/Localization';\nimport { useMasterchef, useCake, useSousChef, useLottery, useCakeVaultContract } from './useContract';\nimport useToast from './useToast';\nimport useLastUpdated from './useLastUpdated'; // Approve a Farm\n\nexport const useApprove = lpContract => {\n  _s();\n\n  const {\n    account\n  } = useWeb3React();\n  const masterChefContract = useMasterchef();\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account);\n      return tx;\n    } catch (e) {\n      return false;\n    }\n  }, [account, lpContract, masterChefContract]);\n  return {\n    onApprove: handleApprove\n  };\n}; // Approve a Pool\n\n_s(useApprove, \"rOE9SviavyZZP9qXjne0NgyHtbc=\", false, function () {\n  return [useWeb3React, useMasterchef];\n});\n\nexport const useSousApprove = (lpContract, sousId, earningTokenSymbol) => {\n  _s2();\n\n  const [requestedApproval, setRequestedApproval] = useState(false);\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const {\n    t\n  } = useTranslation();\n  const dispatch = useAppDispatch();\n  const {\n    account\n  } = useWeb3React();\n  const sousChefContract = useSousChef(sousId);\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true);\n      const tx = await approve(lpContract, sousChefContract, account);\n      dispatch(updateUserAllowance(sousId, account));\n\n      if (tx) {\n        toastSuccess(t('Contract Enabled'), t('You can now stake in the %symbol% pool!', {\n          symbol: earningTokenSymbol\n        }));\n        setRequestedApproval(false);\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n        setRequestedApproval(false);\n      }\n    } catch (e) {\n      console.error(e);\n      toastError(t('Error'), e === null || e === void 0 ? void 0 : e.message);\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, t, toastError, toastSuccess]);\n  return {\n    handleApprove,\n    requestedApproval\n  };\n}; // Approve CAKE auto pool\n\n_s2(useSousApprove, \"gTEIblGPv+nx2FY7sK1CA0guiWE=\", false, function () {\n  return [useToast, useTranslation, useAppDispatch, useWeb3React, useSousChef];\n});\n\nexport const useVaultApprove = setLastUpdated => {\n  _s3();\n\n  const {\n    account\n  } = useWeb3React();\n  const [requestedApproval, setRequestedApproval] = useState(false);\n  const {\n    t\n  } = useTranslation();\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const cakeVaultContract = useCakeVaultContract();\n  const cakeContract = useCake();\n\n  const handleApprove = () => {\n    cakeContract.methods.approve(cakeVaultContract.options.address, ethers.constants.MaxUint256).send({\n      from: account\n    }).on('sending', () => {\n      setRequestedApproval(true);\n    }).on('receipt', () => {\n      toastSuccess(t('Contract Enabled'), t('You can now stake in the %symbol% vault!', {\n        symbol: 'CAKE'\n      }));\n      setLastUpdated();\n      setRequestedApproval(false);\n    }).on('error', error => {\n      console.error(error);\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n      setRequestedApproval(false);\n    });\n  };\n\n  return {\n    handleApprove,\n    requestedApproval\n  };\n};\n\n_s3(useVaultApprove, \"+TNsIOuNk5zhuq6Fwq8lCm+S37U=\", false, function () {\n  return [useWeb3React, useTranslation, useToast, useCakeVaultContract, useCake];\n});\n\nexport const useCheckVaultApprovalStatus = () => {\n  _s4();\n\n  const [isVaultApproved, setIsVaultApproved] = useState(false);\n  const {\n    account\n  } = useWeb3React();\n  const cakeContract = useCake();\n  const cakeVaultContract = useCakeVaultContract();\n  const {\n    lastUpdated,\n    setLastUpdated\n  } = useLastUpdated();\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      try {\n        const response = await cakeContract.methods.allowance(account, cakeVaultContract.options.address).call();\n        const currentAllowance = new BigNumber(response);\n        setIsVaultApproved(currentAllowance.gt(0));\n      } catch (error) {\n        setIsVaultApproved(false);\n      }\n    };\n\n    checkApprovalStatus();\n  }, [account, cakeContract, cakeVaultContract, lastUpdated]);\n  return {\n    isVaultApproved,\n    setLastUpdated\n  };\n}; // Approve the lottery\n\n_s4(useCheckVaultApprovalStatus, \"DYtHZy3b2IMwKe/ETQokUhwfsfM=\", false, function () {\n  return [useWeb3React, useCake, useCakeVaultContract, useLastUpdated];\n});\n\nexport const useLotteryApprove = () => {\n  _s5();\n\n  const {\n    account\n  } = useWeb3React();\n  const cakeContract = useCake();\n  const lotteryContract = useLottery();\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account);\n      return tx;\n    } catch (e) {\n      return false;\n    }\n  }, [account, cakeContract, lotteryContract]);\n  return {\n    onApprove: handleApprove\n  };\n}; // Approve an IFO\n\n_s5(useLotteryApprove, \"LhenuLjIWrjJ4uAEu8OIExDSML8=\", false, function () {\n  return [useWeb3React, useCake, useLottery];\n});\n\nexport const useIfoApprove = (tokenContract, spenderAddress) => {\n  _s6();\n\n  const {\n    account\n  } = useWeb3React();\n  const onApprove = useCallback(async () => {\n    const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({\n      from: account\n    });\n    return tx;\n  }, [account, spenderAddress, tokenContract]);\n  return onApprove;\n};\n\n_s6(useIfoApprove, \"3yImrJ6M/zP7dLRTQFMJ9arc+A8=\", false, function () {\n  return [useWeb3React];\n});","map":{"version":3,"sources":["/Users/danialfajar/Downloads/tbake-web-staking-platform-master/src/hooks/useApprove.ts"],"names":["useCallback","useEffect","useState","useWeb3React","ethers","BigNumber","useAppDispatch","updateUserAllowance","approve","useTranslation","useMasterchef","useCake","useSousChef","useLottery","useCakeVaultContract","useToast","useLastUpdated","useApprove","lpContract","account","masterChefContract","handleApprove","tx","e","onApprove","useSousApprove","sousId","earningTokenSymbol","requestedApproval","setRequestedApproval","toastSuccess","toastError","t","dispatch","sousChefContract","symbol","console","error","message","useVaultApprove","setLastUpdated","cakeVaultContract","cakeContract","methods","options","address","constants","MaxUint256","send","from","on","useCheckVaultApprovalStatus","isVaultApproved","setIsVaultApproved","lastUpdated","checkApprovalStatus","response","allowance","call","currentAllowance","gt","useLotteryApprove","lotteryContract","useIfoApprove","tokenContract","spenderAddress"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport BigNumber from 'bignumber.js'\nimport { useAppDispatch } from 'state'\nimport { updateUserAllowance } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { useMasterchef, useCake, useSousChef, useLottery, useCakeVaultContract } from './useContract'\nimport useToast from './useToast'\nimport useLastUpdated from './useLastUpdated'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId, earningTokenSymbol) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      if (tx) {\n        toastSuccess(\n          t('Contract Enabled'),\n          t('You can now stake in the %symbol% pool!', { symbol: earningTokenSymbol }),\n        )\n        setRequestedApproval(false)\n      } else {\n        // user rejected tx or didn't go thru\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      toastError(t('Error'), e?.message)\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId, earningTokenSymbol, t, toastError, toastSuccess])\n\n  return { handleApprove, requestedApproval }\n}\n\n// Approve CAKE auto pool\nexport const useVaultApprove = (setLastUpdated: () => void) => {\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const cakeVaultContract = useCakeVaultContract()\n  const cakeContract = useCake()\n\n  const handleApprove = () => {\n    cakeContract.methods\n      .approve(cakeVaultContract.options.address, ethers.constants.MaxUint256)\n      .send({ from: account })\n      .on('sending', () => {\n        setRequestedApproval(true)\n      })\n      .on('receipt', () => {\n        toastSuccess(t('Contract Enabled'), t('You can now stake in the %symbol% vault!', { symbol: 'CAKE' }))\n        setLastUpdated()\n        setRequestedApproval(false)\n      })\n      .on('error', (error) => {\n        console.error(error)\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setRequestedApproval(false)\n      })\n  }\n\n  return { handleApprove, requestedApproval }\n}\n\nexport const useCheckVaultApprovalStatus = () => {\n  const [isVaultApproved, setIsVaultApproved] = useState(false)\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const cakeVaultContract = useCakeVaultContract()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  useEffect(() => {\n    const checkApprovalStatus = async () => {\n      try {\n        const response = await cakeContract.methods.allowance(account, cakeVaultContract.options.address).call()\n        const currentAllowance = new BigNumber(response)\n        setIsVaultApproved(currentAllowance.gt(0))\n      } catch (error) {\n        setIsVaultApproved(false)\n      }\n    }\n\n    checkApprovalStatus()\n  }, [account, cakeContract, cakeVaultContract, lastUpdated])\n\n  return { isVaultApproved, setLastUpdated }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWeb3React()\n  const onApprove = useCallback(async () => {\n    const tx = await tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({ from: account })\n    return tx\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n"]},"metadata":{},"sourceType":"module"}