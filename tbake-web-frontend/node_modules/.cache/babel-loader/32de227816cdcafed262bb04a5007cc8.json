{"ast":null,"code":"import Web3 from 'web3';\nimport { ARCHIVED_NODE } from 'config/constants/endpoints';\nimport getRpcUrl from 'utils/getRpcUrl';\nconst RPC_URL = getRpcUrl();\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, {\n  timeout: 10000\n});\nconst web3NoAccount = new Web3(httpProvider);\n\nconst getWeb3NoAccount = () => {\n  return web3NoAccount;\n};\n\nconst getWeb3WithArchivedNodeProvider = () => {\n  const archivedHttpProvider = new Web3.providers.HttpProvider(ARCHIVED_NODE, {\n    timeout: 10000\n  });\n  return new Web3(archivedHttpProvider);\n};\n\nexport { getWeb3NoAccount, getWeb3WithArchivedNodeProvider };\nexport default web3NoAccount;","map":{"version":3,"sources":["/Users/danialfajar/Downloads/tbake-web-staking-platform-master/src/utils/web3.ts"],"names":["Web3","ARCHIVED_NODE","getRpcUrl","RPC_URL","httpProvider","providers","HttpProvider","timeout","web3NoAccount","getWeb3NoAccount","getWeb3WithArchivedNodeProvider","archivedHttpProvider"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAEA,SAASC,aAAT,QAA8B,4BAA9B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AAEA,MAAMC,OAAO,GAAGD,SAAS,EAAzB;AACA,MAAME,YAAY,GAAG,IAAIJ,IAAI,CAACK,SAAL,CAAeC,YAAnB,CAAgCH,OAAhC,EAAyC;AAAEI,EAAAA,OAAO,EAAE;AAAX,CAAzC,CAArB;AACA,MAAMC,aAAa,GAAG,IAAIR,IAAJ,CAASI,YAAT,CAAtB;;AAEA,MAAMK,gBAAgB,GAAG,MAAM;AAC7B,SAAOD,aAAP;AACD,CAFD;;AAIA,MAAME,+BAA+B,GAAG,MAAM;AAC5C,QAAMC,oBAAoB,GAAG,IAAIX,IAAI,CAACK,SAAL,CAAeC,YAAnB,CAAgCL,aAAhC,EAA+C;AAAEM,IAAAA,OAAO,EAAE;AAAX,GAA/C,CAA7B;AACA,SAAO,IAAIP,IAAJ,CAASW,oBAAT,CAAP;AACD,CAHD;;AAKA,SAASF,gBAAT,EAA2BC,+BAA3B;AACA,eAAeF,aAAf","sourcesContent":["import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { ARCHIVED_NODE } from 'config/constants/endpoints'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\nconst web3NoAccount = new Web3(httpProvider)\n\nconst getWeb3NoAccount = () => {\n  return web3NoAccount\n}\n\nconst getWeb3WithArchivedNodeProvider = () => {\n  const archivedHttpProvider = new Web3.providers.HttpProvider(ARCHIVED_NODE, { timeout: 10000 } as HttpProviderOptions)\n  return new Web3(archivedHttpProvider)\n}\n\nexport { getWeb3NoAccount, getWeb3WithArchivedNodeProvider }\nexport default web3NoAccount\n"]},"metadata":{},"sourceType":"module"}