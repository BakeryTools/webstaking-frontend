{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { useAppDispatch } from 'state';\nimport { updateUserStakedBalance, updateUserBalance, updateUserPendingReward } from 'state/actions';\nimport { unstake, sousUnstake, sousEmergencyUnstake } from 'utils/callHelpers';\nimport { useMasterchef, useSousChef } from './useContract';\n\nconst useUnstake = pid => {\n  _s();\n\n  const {\n    account\n  } = useWeb3React();\n  const masterChefContract = useMasterchef();\n  const handleUnstake = useCallback(async amount => {\n    const txHash = await unstake(masterChefContract, pid, amount, account);\n    console.info(txHash);\n  }, [account, masterChefContract, pid]);\n  return {\n    onUnstake: handleUnstake\n  };\n};\n\n_s(useUnstake, \"CoggbDrFss9Dhc0OTDjVFUgbxXI=\", false, function () {\n  return [useWeb3React, useMasterchef];\n});\n\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\n  _s2();\n\n  const dispatch = useAppDispatch();\n  const {\n    account\n  } = useWeb3React();\n  const masterChefContract = useMasterchef();\n  const sousChefContract = useSousChef(sousId);\n  const handleUnstake = useCallback(async (amount, decimals) => {\n    if (sousId === 0) {\n      const txHash = await unstake(masterChefContract, 0, amount, account);\n      console.info(txHash);\n    } else if (enableEmergencyWithdraw) {\n      const txHash = await sousEmergencyUnstake(sousChefContract, account);\n      console.info(txHash);\n    } else {\n      const txHash = await sousUnstake(sousChefContract, amount, decimals, account);\n      console.info(txHash);\n    }\n\n    dispatch(updateUserStakedBalance(sousId, account));\n    dispatch(updateUserBalance(sousId, account));\n    dispatch(updateUserPendingReward(sousId, account));\n  }, [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId]);\n  return {\n    onUnstake: handleUnstake\n  };\n};\n\n_s2(useSousUnstake, \"ZdLCx5w3kCXGv4NZYm/42J9apvQ=\", false, function () {\n  return [useAppDispatch, useWeb3React, useMasterchef, useSousChef];\n});\n\nexport default useUnstake;","map":{"version":3,"sources":["/Users/danialfajar/Downloads/tbake-web-staking-platform-master/src/hooks/useUnstake.ts"],"names":["useCallback","useWeb3React","useAppDispatch","updateUserStakedBalance","updateUserBalance","updateUserPendingReward","unstake","sousUnstake","sousEmergencyUnstake","useMasterchef","useSousChef","useUnstake","pid","account","masterChefContract","handleUnstake","amount","txHash","console","info","onUnstake","useSousUnstake","sousId","enableEmergencyWithdraw","dispatch","sousChefContract","decimals"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,cAAT,QAA+B,OAA/B;AACA,SAASC,uBAAT,EAAkCC,iBAAlC,EAAqDC,uBAArD,QAAoF,eAApF;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,oBAA/B,QAA2D,mBAA3D;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,eAA3C;;AAEA,MAAMC,UAAU,GAAIC,GAAD,IAAiB;AAAA;;AAClC,QAAM;AAAEC,IAAAA;AAAF,MAAcZ,YAAY,EAAhC;AACA,QAAMa,kBAAkB,GAAGL,aAAa,EAAxC;AAEA,QAAMM,aAAa,GAAGf,WAAW,CAC/B,MAAOgB,MAAP,IAA0B;AACxB,UAAMC,MAAM,GAAG,MAAMX,OAAO,CAACQ,kBAAD,EAAqBF,GAArB,EAA0BI,MAA1B,EAAkCH,OAAlC,CAA5B;AACAK,IAAAA,OAAO,CAACC,IAAR,CAAaF,MAAb;AACD,GAJ8B,EAK/B,CAACJ,OAAD,EAAUC,kBAAV,EAA8BF,GAA9B,CAL+B,CAAjC;AAQA,SAAO;AAAEQ,IAAAA,SAAS,EAAEL;AAAb,GAAP;AACD,CAbD;;GAAMJ,U;UACgBV,Y,EACOQ,a;;;AAa7B,OAAO,MAAMY,cAAc,GAAG,CAACC,MAAD,EAASC,uBAAuB,GAAG,KAAnC,KAA6C;AAAA;;AACzE,QAAMC,QAAQ,GAAGtB,cAAc,EAA/B;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAcZ,YAAY,EAAhC;AACA,QAAMa,kBAAkB,GAAGL,aAAa,EAAxC;AACA,QAAMgB,gBAAgB,GAAGf,WAAW,CAACY,MAAD,CAApC;AAEA,QAAMP,aAAa,GAAGf,WAAW,CAC/B,OAAOgB,MAAP,EAAuBU,QAAvB,KAA4C;AAC1C,QAAIJ,MAAM,KAAK,CAAf,EAAkB;AAChB,YAAML,MAAM,GAAG,MAAMX,OAAO,CAACQ,kBAAD,EAAqB,CAArB,EAAwBE,MAAxB,EAAgCH,OAAhC,CAA5B;AACAK,MAAAA,OAAO,CAACC,IAAR,CAAaF,MAAb;AACD,KAHD,MAGO,IAAIM,uBAAJ,EAA6B;AAClC,YAAMN,MAAM,GAAG,MAAMT,oBAAoB,CAACiB,gBAAD,EAAmBZ,OAAnB,CAAzC;AACAK,MAAAA,OAAO,CAACC,IAAR,CAAaF,MAAb;AACD,KAHM,MAGA;AACL,YAAMA,MAAM,GAAG,MAAMV,WAAW,CAACkB,gBAAD,EAAmBT,MAAnB,EAA2BU,QAA3B,EAAqCb,OAArC,CAAhC;AACAK,MAAAA,OAAO,CAACC,IAAR,CAAaF,MAAb;AACD;;AACDO,IAAAA,QAAQ,CAACrB,uBAAuB,CAACmB,MAAD,EAAST,OAAT,CAAxB,CAAR;AACAW,IAAAA,QAAQ,CAACpB,iBAAiB,CAACkB,MAAD,EAAST,OAAT,CAAlB,CAAR;AACAW,IAAAA,QAAQ,CAACnB,uBAAuB,CAACiB,MAAD,EAAST,OAAT,CAAxB,CAAR;AACD,GAf8B,EAgB/B,CAACA,OAAD,EAAUW,QAAV,EAAoBD,uBAApB,EAA6CT,kBAA7C,EAAiEW,gBAAjE,EAAmFH,MAAnF,CAhB+B,CAAjC;AAmBA,SAAO;AAAEF,IAAAA,SAAS,EAAEL;AAAb,GAAP;AACD,CA1BM;;IAAMM,c;UACMnB,c,EACGD,Y,EACOQ,a,EACFC,W;;;AAwB3B,eAAeC,UAAf","sourcesContent":["import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserStakedBalance, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { unstake, sousUnstake, sousEmergencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      console.info(txHash)\n    },\n    [account, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport const useSousUnstake = (sousId, enableEmergencyWithdraw = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (enableEmergencyWithdraw) {\n        const txHash = await sousEmergencyUnstake(sousChefContract, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, decimals, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n"]},"metadata":{},"sourceType":"module"}