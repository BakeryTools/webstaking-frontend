{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { useAppDispatch } from 'state';\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions';\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers';\nimport { useMasterchef, useSousChef } from './useContract';\nexport const useHarvest = farmPid => {\n  _s();\n\n  const {\n    account\n  } = useWeb3React();\n  const masterChefContract = useMasterchef();\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account);\n    return txHash;\n  }, [account, farmPid, masterChefContract]);\n  return {\n    onReward: handleHarvest\n  };\n};\n\n_s(useHarvest, \"beaCbcp5xpg3UB9uTwImsLZaxyM=\", false, function () {\n  return [useWeb3React, useMasterchef];\n});\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  _s2();\n\n  const dispatch = useAppDispatch();\n  const {\n    account\n  } = useWeb3React();\n  const sousChefContract = useSousChef(sousId);\n  const masterChefContract = useMasterchef();\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account);\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account);\n    } else {\n      await soushHarvest(sousChefContract, account);\n    }\n\n    dispatch(updateUserPendingReward(sousId, account));\n    dispatch(updateUserBalance(sousId, account));\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId]);\n  return {\n    onReward: handleHarvest\n  };\n};\n\n_s2(useSousHarvest, \"CZpRWa4Ye7nHR4cIWJtVsGIiaUI=\", false, function () {\n  return [useAppDispatch, useWeb3React, useSousChef, useMasterchef];\n});","map":{"version":3,"sources":["/Users/danialfajar/Downloads/tbake-web-staking-platform-master/src/hooks/useHarvest.ts"],"names":["useCallback","useWeb3React","useAppDispatch","updateUserBalance","updateUserPendingReward","soushHarvest","soushHarvestBnb","harvest","useMasterchef","useSousChef","useHarvest","farmPid","account","masterChefContract","handleHarvest","txHash","onReward","useSousHarvest","sousId","isUsingBnb","dispatch","sousChefContract"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,cAAT,QAA+B,OAA/B;AACA,SAASC,iBAAT,EAA4BC,uBAA5B,QAA2D,eAA3D;AACA,SAASC,YAAT,EAAuBC,eAAvB,EAAwCC,OAAxC,QAAuD,mBAAvD;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,eAA3C;AAEA,OAAO,MAAMC,UAAU,GAAIC,OAAD,IAAqB;AAAA;;AAC7C,QAAM;AAAEC,IAAAA;AAAF,MAAcX,YAAY,EAAhC;AACA,QAAMY,kBAAkB,GAAGL,aAAa,EAAxC;AAEA,QAAMM,aAAa,GAAGd,WAAW,CAAC,YAAY;AAC5C,UAAMe,MAAM,GAAG,MAAMR,OAAO,CAACM,kBAAD,EAAqBF,OAArB,EAA8BC,OAA9B,CAA5B;AACA,WAAOG,MAAP;AACD,GAHgC,EAG9B,CAACH,OAAD,EAAUD,OAAV,EAAmBE,kBAAnB,CAH8B,CAAjC;AAKA,SAAO;AAAEG,IAAAA,QAAQ,EAAEF;AAAZ,GAAP;AACD,CAVM;;GAAMJ,U;UACST,Y,EACOO,a;;;AAU7B,OAAO,MAAMS,cAAc,GAAG,CAACC,MAAD,EAASC,UAAU,GAAG,KAAtB,KAAgC;AAAA;;AAC5D,QAAMC,QAAQ,GAAGlB,cAAc,EAA/B;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAcX,YAAY,EAAhC;AACA,QAAMoB,gBAAgB,GAAGZ,WAAW,CAACS,MAAD,CAApC;AACA,QAAML,kBAAkB,GAAGL,aAAa,EAAxC;AAEA,QAAMM,aAAa,GAAGd,WAAW,CAAC,YAAY;AAC5C,QAAIkB,MAAM,KAAK,CAAf,EAAkB;AAChB,YAAMX,OAAO,CAACM,kBAAD,EAAqB,CAArB,EAAwBD,OAAxB,CAAb;AACD,KAFD,MAEO,IAAIO,UAAJ,EAAgB;AACrB,YAAMb,eAAe,CAACe,gBAAD,EAAmBT,OAAnB,CAArB;AACD,KAFM,MAEA;AACL,YAAMP,YAAY,CAACgB,gBAAD,EAAmBT,OAAnB,CAAlB;AACD;;AACDQ,IAAAA,QAAQ,CAAChB,uBAAuB,CAACc,MAAD,EAASN,OAAT,CAAxB,CAAR;AACAQ,IAAAA,QAAQ,CAACjB,iBAAiB,CAACe,MAAD,EAASN,OAAT,CAAlB,CAAR;AACD,GAVgC,EAU9B,CAACA,OAAD,EAAUQ,QAAV,EAAoBD,UAApB,EAAgCN,kBAAhC,EAAoDQ,gBAApD,EAAsEH,MAAtE,CAV8B,CAAjC;AAYA,SAAO;AAAEF,IAAAA,QAAQ,EAAEF;AAAZ,GAAP;AACD,CAnBM;;IAAMG,c;UACMf,c,EACGD,Y,EACKQ,W,EACED,a","sourcesContent":["import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { soushHarvest, soushHarvestBnb, harvest } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nexport const useHarvest = (farmPid: number) => {\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    const txHash = await harvest(masterChefContract, farmPid, account)\n    return txHash\n  }, [account, farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport const useSousHarvest = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvest(masterChefContract, 0, account)\n    } else if (isUsingBnb) {\n      await soushHarvestBnb(sousChefContract, account)\n    } else {\n      await soushHarvest(sousChefContract, account)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n"]},"metadata":{},"sourceType":"module"}