{"ast":null,"code":"var _jsxFileName = \"/Users/danialfajar/Downloads/tbake-web-staking-platform-master/src/views/Farms/components/FarmCard/StakeAction.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport styled from 'styled-components';\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit';\nimport { useLocation } from 'react-router-dom';\nimport { useTranslation } from 'contexts/Localization';\nimport { useAppDispatch } from 'state';\nimport { fetchFarmUserDataAsync } from 'state/farms';\nimport useStake from 'hooks/useStake';\nimport useUnstake from 'hooks/useUnstake';\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance';\nimport DepositModal from '../DepositModal';\nimport WithdrawModal from '../WithdrawModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`;\n_c = IconButtonWrapper;\n\nconst StakeAction = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    onStake\n  } = useStake(pid);\n  const {\n    onUnstake\n  } = useUnstake(pid);\n  const location = useLocation();\n  const dispatch = useAppDispatch();\n  const {\n    account\n  } = useWeb3React();\n\n  const handleStake = async amount => {\n    await onStake(amount);\n    dispatch(fetchFarmUserDataAsync({\n      account,\n      pids: [pid]\n    }));\n  };\n\n  const handleUnstake = async amount => {\n    await onUnstake(amount);\n    dispatch(fetchFarmUserDataAsync({\n      account,\n      pids: [pid]\n    }));\n  };\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance);\n\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString();\n    }\n\n    return stakedBalanceNumber.toLocaleString();\n  }, [stakedBalance]);\n  const [onPresentDeposit] = useModal( /*#__PURE__*/_jsxDEV(DepositModal, {\n    max: tokenBalance,\n    onConfirm: handleStake,\n    tokenName: tokenName,\n    addLiquidityUrl: addLiquidityUrl\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this));\n  const [onPresentWithdraw] = useModal( /*#__PURE__*/_jsxDEV(WithdrawModal, {\n    max: stakedBalance,\n    onConfirm: handleUnstake,\n    tokenName: tokenName\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this));\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? /*#__PURE__*/_jsxDEV(Button, {\n      onClick: onPresentDeposit,\n      disabled: ['history', 'archived'].some(item => location.pathname.includes(item)),\n      children: t('Stake LP')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(IconButtonWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        variant: \"tertiary\",\n        onClick: onPresentWithdraw,\n        mr: \"6px\",\n        children: /*#__PURE__*/_jsxDEV(MinusIcon, {\n          color: \"primary\",\n          width: \"14px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        variant: \"tertiary\",\n        onClick: onPresentDeposit,\n        disabled: ['history', 'archived'].some(item => location.pathname.includes(item)),\n        children: /*#__PURE__*/_jsxDEV(AddIcon, {\n          color: \"primary\",\n          width: \"14px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      color: stakedBalance.eq(0) ? 'textDisabled' : 'text',\n      children: displayBalance()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), renderStakingButtons()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StakeAction, \"8eH8EvQ8ewFp9qJXPwV2fN+/H94=\", false, function () {\n  return [useTranslation, useStake, useUnstake, useLocation, useAppDispatch, useWeb3React, useModal, useModal];\n});\n\n_c2 = StakeAction;\nexport default StakeAction;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"IconButtonWrapper\");\n$RefreshReg$(_c2, \"StakeAction\");","map":{"version":3,"sources":["/Users/danialfajar/Downloads/tbake-web-staking-platform-master/src/views/Farms/components/FarmCard/StakeAction.tsx"],"names":["React","useCallback","useWeb3React","styled","Button","Flex","Heading","IconButton","AddIcon","MinusIcon","useModal","useLocation","useTranslation","useAppDispatch","fetchFarmUserDataAsync","useStake","useUnstake","getBalanceNumber","getFullDisplayBalance","DepositModal","WithdrawModal","IconButtonWrapper","div","StakeAction","stakedBalance","tokenBalance","tokenName","pid","addLiquidityUrl","t","onStake","onUnstake","location","dispatch","account","handleStake","amount","pids","handleUnstake","displayBalance","stakedBalanceNumber","toLocaleString","onPresentDeposit","onPresentWithdraw","renderStakingButtons","eq","some","item","pathname","includes"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,OAAvB,EAAgCC,UAAhC,EAA4CC,OAA5C,EAAqDC,SAArD,EAAgEC,QAAhE,QAAgF,oBAAhF;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,cAAT,QAA+B,OAA/B;AACA,SAASC,sBAAT,QAAuC,aAAvC;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,SAASC,gBAAT,EAA2BC,qBAA3B,QAAwD,qBAAxD;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;;AAUA,MAAMC,iBAAiB,GAAGlB,MAAM,CAACmB,GAAI;AACrC;AACA;AACA;AACA;AACA,CALA;KAAMD,iB;;AAON,MAAME,WAA2C,GAAG,CAAC;AACnDC,EAAAA,aADmD;AAEnDC,EAAAA,YAFmD;AAGnDC,EAAAA,SAHmD;AAInDC,EAAAA,GAJmD;AAKnDC,EAAAA;AALmD,CAAD,KAM9C;AAAA;;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAQjB,cAAc,EAA5B;AACA,QAAM;AAAEkB,IAAAA;AAAF,MAAcf,QAAQ,CAACY,GAAD,CAA5B;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAgBf,UAAU,CAACW,GAAD,CAAhC;AACA,QAAMK,QAAQ,GAAGrB,WAAW,EAA5B;AACA,QAAMsB,QAAQ,GAAGpB,cAAc,EAA/B;AACA,QAAM;AAAEqB,IAAAA;AAAF,MAAchC,YAAY,EAAhC;;AAEA,QAAMiC,WAAW,GAAG,MAAOC,MAAP,IAA0B;AAC5C,UAAMN,OAAO,CAACM,MAAD,CAAb;AACAH,IAAAA,QAAQ,CAACnB,sBAAsB,CAAC;AAAEoB,MAAAA,OAAF;AAAWG,MAAAA,IAAI,EAAE,CAACV,GAAD;AAAjB,KAAD,CAAvB,CAAR;AACD,GAHD;;AAKA,QAAMW,aAAa,GAAG,MAAOF,MAAP,IAA0B;AAC9C,UAAML,SAAS,CAACK,MAAD,CAAf;AACAH,IAAAA,QAAQ,CAACnB,sBAAsB,CAAC;AAAEoB,MAAAA,OAAF;AAAWG,MAAAA,IAAI,EAAE,CAACV,GAAD;AAAjB,KAAD,CAAvB,CAAR;AACD,GAHD;;AAKA,QAAMY,cAAc,GAAGtC,WAAW,CAAC,MAAM;AACvC,UAAMuC,mBAAmB,GAAGvB,gBAAgB,CAACO,aAAD,CAA5C;;AACA,QAAIgB,mBAAmB,GAAG,CAAtB,IAA2BA,mBAAmB,GAAG,MAArD,EAA6D;AAC3D,aAAOtB,qBAAqB,CAACM,aAAD,CAArB,CAAqCiB,cAArC,EAAP;AACD;;AACD,WAAOD,mBAAmB,CAACC,cAApB,EAAP;AACD,GANiC,EAM/B,CAACjB,aAAD,CAN+B,CAAlC;AAQA,QAAM,CAACkB,gBAAD,IAAqBhC,QAAQ,eACjC,QAAC,YAAD;AAAc,IAAA,GAAG,EAAEe,YAAnB;AAAiC,IAAA,SAAS,EAAEU,WAA5C;AAAyD,IAAA,SAAS,EAAET,SAApE;AAA+E,IAAA,eAAe,EAAEE;AAAhG;AAAA;AAAA;AAAA;AAAA,UADiC,CAAnC;AAGA,QAAM,CAACe,iBAAD,IAAsBjC,QAAQ,eAClC,QAAC,aAAD;AAAe,IAAA,GAAG,EAAEc,aAApB;AAAmC,IAAA,SAAS,EAAEc,aAA9C;AAA6D,IAAA,SAAS,EAAEZ;AAAxE;AAAA;AAAA;AAAA;AAAA,UADkC,CAApC;;AAIA,QAAMkB,oBAAoB,GAAG,MAAM;AACjC,WAAOpB,aAAa,CAACqB,EAAd,CAAiB,CAAjB,iBACL,QAAC,MAAD;AACE,MAAA,OAAO,EAAEH,gBADX;AAEE,MAAA,QAAQ,EAAE,CAAC,SAAD,EAAY,UAAZ,EAAwBI,IAAxB,CAA8BC,IAAD,IAAUf,QAAQ,CAACgB,QAAT,CAAkBC,QAAlB,CAA2BF,IAA3B,CAAvC,CAFZ;AAAA,gBAIGlB,CAAC,CAAC,UAAD;AAJJ;AAAA;AAAA;AAAA;AAAA,YADK,gBAQL,QAAC,iBAAD;AAAA,8BACE,QAAC,UAAD;AAAY,QAAA,OAAO,EAAC,UAApB;AAA+B,QAAA,OAAO,EAAEc,iBAAxC;AAA2D,QAAA,EAAE,EAAC,KAA9D;AAAA,+BACE,QAAC,SAAD;AAAW,UAAA,KAAK,EAAC,SAAjB;AAA2B,UAAA,KAAK,EAAC;AAAjC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,UAAD;AACE,QAAA,OAAO,EAAC,UADV;AAEE,QAAA,OAAO,EAAED,gBAFX;AAGE,QAAA,QAAQ,EAAE,CAAC,SAAD,EAAY,UAAZ,EAAwBI,IAAxB,CAA8BC,IAAD,IAAUf,QAAQ,CAACgB,QAAT,CAAkBC,QAAlB,CAA2BF,IAA3B,CAAvC,CAHZ;AAAA,+BAKE,QAAC,OAAD;AAAS,UAAA,KAAK,EAAC,SAAf;AAAyB,UAAA,KAAK,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YARF;AAqBD,GAtBD;;AAwBA,sBACE,QAAC,IAAD;AAAM,IAAA,cAAc,EAAC,eAArB;AAAqC,IAAA,UAAU,EAAC,QAAhD;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,KAAK,EAAEvB,aAAa,CAACqB,EAAd,CAAiB,CAAjB,IAAsB,cAAtB,GAAuC,MAAvD;AAAA,gBAAgEN,cAAc;AAA9E;AAAA;AAAA;AAAA;AAAA,YADF,EAEGK,oBAAoB,EAFvB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CArED;;GAAMrB,W;UAOUX,c,EACMG,Q,EACEC,U,EACLL,W,EACAE,c,EACGX,Y,EAoBOQ,Q,EAGCA,Q;;;MAnCxBa,W;AAuEN,eAAeA,WAAf","sourcesContent":["import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance)\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceNumber.toLocaleString()\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={handleStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n      >\n        {t('Stake LP')}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n"]},"metadata":{},"sourceType":"module"}