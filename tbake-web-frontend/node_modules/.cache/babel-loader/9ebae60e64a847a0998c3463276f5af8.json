{"ast":null,"code":"var _jsxFileName = \"/Users/danialfajar/Downloads/tbake-web-staking-platform-master/src/views/Pools/components/PoolsTable/Cells/NameCell.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport BigNumber from 'bignumber.js';\nimport { Text, Image, useMatchBreakpoints } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { useCakeVault } from 'state/hooks';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport BaseCell, { CellContent } from './BaseCell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledCell = styled(BaseCell)`\n  flex: 5;\n  flex-direction: row;\n  padding-left: 12px;\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    flex: 1 0 150px;\n    padding-left: 32px;\n  }\n`;\n_c = StyledCell;\n\nconst NameCell = ({\n  pool\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    isXs,\n    isSm\n  } = useMatchBreakpoints();\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    userData,\n    isFinished,\n    isAutoVault\n  } = pool;\n  const {\n    userData: {\n      userShares\n    }\n  } = useCakeVault();\n  const hasVaultShares = userShares && userShares.gt(0);\n  const stakingTokenSymbol = stakingToken.symbol;\n  const earningTokenSymbol = earningToken.symbol;\n  const iconFile = `${earningTokenSymbol}-${stakingTokenSymbol}.svg`.toLocaleLowerCase();\n  const stakedBalance = (userData === null || userData === void 0 ? void 0 : userData.stakedBalance) ? new BigNumber(userData.stakedBalance) : BIG_ZERO;\n  const isStaked = stakedBalance.gt(0);\n  const isManualCakePool = sousId === 0;\n  const showStakedTag = isAutoVault ? hasVaultShares : isStaked;\n  let title = `${t('Earn')} ${earningTokenSymbol}`;\n  let subtitle = `${t('Stake')} ${stakingTokenSymbol}`;\n  const showSubtitle = sousId !== 0 || sousId === 0 && !isXs && !isSm;\n\n  if (isAutoVault) {\n    title = t('Auto CAKE');\n    subtitle = t('Automatic restaking');\n  } else if (isManualCakePool) {\n    title = t('Manual CAKE');\n    subtitle = `${t('Earn')} CAKE ${t('Stake').toLocaleLowerCase()} CAKE`;\n  }\n\n  return /*#__PURE__*/_jsxDEV(StyledCell, {\n    role: \"cell\",\n    children: [/*#__PURE__*/_jsxDEV(Image, {\n      src: `/images/pools/${iconFile}`,\n      alt: \"icon\",\n      width: 40,\n      height: 40,\n      mr: \"8px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CellContent, {\n      children: [showStakedTag && /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"12px\",\n        bold: true,\n        color: isFinished ? 'failure' : 'secondary',\n        textTransform: \"uppercase\",\n        children: t('Staked')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        bold: !isXs && !isSm,\n        small: isXs || isSm,\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), showSubtitle && /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"12px\",\n        color: \"textSubtle\",\n        children: subtitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NameCell, \"PmNfDrSiS7oNOH+4Fb/irPXrxS8=\", false, function () {\n  return [useTranslation, useMatchBreakpoints, useCakeVault];\n});\n\n_c2 = NameCell;\nexport default NameCell;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledCell\");\n$RefreshReg$(_c2, \"NameCell\");","map":{"version":3,"sources":["/Users/danialfajar/Downloads/tbake-web-staking-platform-master/src/views/Pools/components/PoolsTable/Cells/NameCell.tsx"],"names":["React","styled","BigNumber","Text","Image","useMatchBreakpoints","useTranslation","useCakeVault","BIG_ZERO","BaseCell","CellContent","StyledCell","theme","mediaQueries","sm","NameCell","pool","t","isXs","isSm","sousId","stakingToken","earningToken","userData","isFinished","isAutoVault","userShares","hasVaultShares","gt","stakingTokenSymbol","symbol","earningTokenSymbol","iconFile","toLocaleLowerCase","stakedBalance","isStaked","isManualCakePool","showStakedTag","title","subtitle","showSubtitle"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,mBAAtB,QAAiD,oBAAjD;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,YAAT,QAA6B,aAA7B;AAEA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,QAAP,IAAmBC,WAAnB,QAAsC,YAAtC;;AAMA,MAAMC,UAAU,GAAGV,MAAM,CAACQ,QAAD,CAAW;AACpC;AACA;AACA;AACA,IAAI,CAAC;AAAEG,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,YAAN,CAAmBC,EAAG;AACzC;AACA;AACA;AACA,CARA;KAAMH,U;;AAUN,MAAMI,QAAiC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AACtD,QAAM;AAAEC,IAAAA;AAAF,MAAQX,cAAc,EAA5B;AACA,QAAM;AAAEY,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAiBd,mBAAmB,EAA1C;AACA,QAAM;AAAEe,IAAAA,MAAF;AAAUC,IAAAA,YAAV;AAAwBC,IAAAA,YAAxB;AAAsCC,IAAAA,QAAtC;AAAgDC,IAAAA,UAAhD;AAA4DC,IAAAA;AAA5D,MAA4ET,IAAlF;AACA,QAAM;AACJO,IAAAA,QAAQ,EAAE;AAAEG,MAAAA;AAAF;AADN,MAEFnB,YAAY,EAFhB;AAGA,QAAMoB,cAAc,GAAGD,UAAU,IAAIA,UAAU,CAACE,EAAX,CAAc,CAAd,CAArC;AAEA,QAAMC,kBAAkB,GAAGR,YAAY,CAACS,MAAxC;AACA,QAAMC,kBAAkB,GAAGT,YAAY,CAACQ,MAAxC;AACA,QAAME,QAAQ,GAAI,GAAED,kBAAmB,IAAGF,kBAAmB,MAA5C,CAAkDI,iBAAlD,EAAjB;AAEA,QAAMC,aAAa,GAAG,CAAAX,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEW,aAAV,IAA0B,IAAIhC,SAAJ,CAAcqB,QAAQ,CAACW,aAAvB,CAA1B,GAAkE1B,QAAxF;AACA,QAAM2B,QAAQ,GAAGD,aAAa,CAACN,EAAd,CAAiB,CAAjB,CAAjB;AACA,QAAMQ,gBAAgB,GAAGhB,MAAM,KAAK,CAApC;AAEA,QAAMiB,aAAa,GAAGZ,WAAW,GAAGE,cAAH,GAAoBQ,QAArD;AAEA,MAAIG,KAAK,GAAI,GAAErB,CAAC,CAAC,MAAD,CAAS,IAAGc,kBAAmB,EAA/C;AACA,MAAIQ,QAAQ,GAAI,GAAEtB,CAAC,CAAC,OAAD,CAAU,IAAGY,kBAAmB,EAAnD;AACA,QAAMW,YAAY,GAAGpB,MAAM,KAAK,CAAX,IAAiBA,MAAM,KAAK,CAAX,IAAgB,CAACF,IAAjB,IAAyB,CAACC,IAAhE;;AAEA,MAAIM,WAAJ,EAAiB;AACfa,IAAAA,KAAK,GAAGrB,CAAC,CAAC,WAAD,CAAT;AACAsB,IAAAA,QAAQ,GAAGtB,CAAC,CAAC,qBAAD,CAAZ;AACD,GAHD,MAGO,IAAImB,gBAAJ,EAAsB;AAC3BE,IAAAA,KAAK,GAAGrB,CAAC,CAAC,aAAD,CAAT;AACAsB,IAAAA,QAAQ,GAAI,GAAEtB,CAAC,CAAC,MAAD,CAAS,SAAQA,CAAC,CAAC,OAAD,CAAD,CAAWgB,iBAAX,EAA+B,OAA/D;AACD;;AAED,sBACE,QAAC,UAAD;AAAY,IAAA,IAAI,EAAC,MAAjB;AAAA,4BACE,QAAC,KAAD;AAAO,MAAA,GAAG,EAAG,iBAAgBD,QAAS,EAAtC;AAAyC,MAAA,GAAG,EAAC,MAA7C;AAAoD,MAAA,KAAK,EAAE,EAA3D;AAA+D,MAAA,MAAM,EAAE,EAAvE;AAA2E,MAAA,EAAE,EAAC;AAA9E;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,WAAD;AAAA,iBACGK,aAAa,iBACZ,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAC,MAAf;AAAsB,QAAA,IAAI,MAA1B;AAA2B,QAAA,KAAK,EAAEb,UAAU,GAAG,SAAH,GAAe,WAA3D;AAAwE,QAAA,aAAa,EAAC,WAAtF;AAAA,kBACGP,CAAC,CAAC,QAAD;AADJ;AAAA;AAAA;AAAA;AAAA,cAFJ,eAME,QAAC,IAAD;AAAM,QAAA,IAAI,EAAE,CAACC,IAAD,IAAS,CAACC,IAAtB;AAA4B,QAAA,KAAK,EAAED,IAAI,IAAIC,IAA3C;AAAA,kBACGmB;AADH;AAAA;AAAA;AAAA;AAAA,cANF,EASGE,YAAY,iBACX,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAC,MAAf;AAAsB,QAAA,KAAK,EAAC,YAA5B;AAAA,kBACGD;AADH;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CAnDD;;GAAMxB,Q;UACUT,c,EACSD,mB,EAInBE,Y;;;MANAQ,Q;AAqDN,eAAeA,QAAf","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Text, Image, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault } from 'state/hooks'\nimport { Pool } from 'state/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface NameCellProps {\n  pool: Pool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 5;\n  flex-direction: row;\n  padding-left: 12px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 150px;\n    padding-left: 32px;\n  }\n`\n\nconst NameCell: React.FC<NameCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { isXs, isSm } = useMatchBreakpoints()\n  const { sousId, stakingToken, earningToken, userData, isFinished, isAutoVault } = pool\n  const {\n    userData: { userShares },\n  } = useCakeVault()\n  const hasVaultShares = userShares && userShares.gt(0)\n\n  const stakingTokenSymbol = stakingToken.symbol\n  const earningTokenSymbol = earningToken.symbol\n  const iconFile = `${earningTokenSymbol}-${stakingTokenSymbol}.svg`.toLocaleLowerCase()\n\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const isStaked = stakedBalance.gt(0)\n  const isManualCakePool = sousId === 0\n\n  const showStakedTag = isAutoVault ? hasVaultShares : isStaked\n\n  let title = `${t('Earn')} ${earningTokenSymbol}`\n  let subtitle = `${t('Stake')} ${stakingTokenSymbol}`\n  const showSubtitle = sousId !== 0 || (sousId === 0 && !isXs && !isSm)\n\n  if (isAutoVault) {\n    title = t('Auto CAKE')\n    subtitle = t('Automatic restaking')\n  } else if (isManualCakePool) {\n    title = t('Manual CAKE')\n    subtitle = `${t('Earn')} CAKE ${t('Stake').toLocaleLowerCase()} CAKE`\n  }\n\n  return (\n    <StyledCell role=\"cell\">\n      <Image src={`/images/pools/${iconFile}`} alt=\"icon\" width={40} height={40} mr=\"8px\" />\n      <CellContent>\n        {showStakedTag && (\n          <Text fontSize=\"12px\" bold color={isFinished ? 'failure' : 'secondary'} textTransform=\"uppercase\">\n            {t('Staked')}\n          </Text>\n        )}\n        <Text bold={!isXs && !isSm} small={isXs || isSm}>\n          {title}\n        </Text>\n        {showSubtitle && (\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {subtitle}\n          </Text>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default NameCell\n"]},"metadata":{},"sourceType":"module"}