{"ast":null,"code":"var _jsxFileName = \"/Users/danialfajar/Downloads/tbake-web-staking-platform-master/src/contexts/RefreshContext.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport useTabVisibility from 'hooks/useTabVisibility';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FAST_INTERVAL = 10000;\nconst SLOW_INTERVAL = 60000;\nconst RefreshContext = /*#__PURE__*/React.createContext({\n  slow: 0,\n  fast: 0\n}); // This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\n\nconst RefreshContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [slow, setSlow] = useState(0);\n  const [fast, setFast] = useState(0);\n  const {\n    tabVisibleRef\n  } = useTabVisibility();\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (tabVisibleRef.current) {\n        setFast(prev => prev + 1);\n      }\n    }, FAST_INTERVAL);\n    return () => clearInterval(interval);\n  }, [tabVisibleRef]);\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (tabVisibleRef.current) {\n        setSlow(prev => prev + 1);\n      }\n    }, SLOW_INTERVAL);\n    return () => clearInterval(interval);\n  }, [tabVisibleRef]);\n  return /*#__PURE__*/_jsxDEV(RefreshContext.Provider, {\n    value: {\n      slow,\n      fast\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 10\n  }, this);\n};\n\n_s(RefreshContextProvider, \"FE/E98eRY8+Rkvt/edVcbfHhpKc=\", false, function () {\n  return [useTabVisibility];\n});\n\n_c = RefreshContextProvider;\nexport { RefreshContext, RefreshContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"RefreshContextProvider\");","map":{"version":3,"sources":["/Users/danialfajar/Downloads/tbake-web-staking-platform-master/src/contexts/RefreshContext.tsx"],"names":["React","useState","useEffect","useTabVisibility","FAST_INTERVAL","SLOW_INTERVAL","RefreshContext","createContext","slow","fast","RefreshContextProvider","children","setSlow","setFast","tabVisibleRef","interval","setInterval","current","prev","clearInterval"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,gBAAP,MAA6B,wBAA7B;;AAEA,MAAMC,aAAa,GAAG,KAAtB;AACA,MAAMC,aAAa,GAAG,KAAtB;AAEA,MAAMC,cAAc,gBAAGN,KAAK,CAACO,aAAN,CAAoB;AAAEC,EAAAA,IAAI,EAAE,CAAR;AAAWC,EAAAA,IAAI,EAAE;AAAjB,CAApB,CAAvB,C,CAEA;;AACA,MAAMC,sBAAsB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC/C,QAAM,CAACH,IAAD,EAAOI,OAAP,IAAkBX,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACQ,IAAD,EAAOI,OAAP,IAAkBZ,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAoBX,gBAAgB,EAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,QAAQ,GAAGC,WAAW,CAAC,YAAY;AACvC,UAAIF,aAAa,CAACG,OAAlB,EAA2B;AACzBJ,QAAAA,OAAO,CAAEK,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAP;AACD;AACF,KAJ2B,EAIzBd,aAJyB,CAA5B;AAKA,WAAO,MAAMe,aAAa,CAACJ,QAAD,CAA1B;AACD,GAPQ,EAON,CAACD,aAAD,CAPM,CAAT;AASAZ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,QAAQ,GAAGC,WAAW,CAAC,YAAY;AACvC,UAAIF,aAAa,CAACG,OAAlB,EAA2B;AACzBL,QAAAA,OAAO,CAAEM,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAP;AACD;AACF,KAJ2B,EAIzBb,aAJyB,CAA5B;AAKA,WAAO,MAAMc,aAAa,CAACJ,QAAD,CAA1B;AACD,GAPQ,EAON,CAACD,aAAD,CAPM,CAAT;AASA,sBAAO,QAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAE;AAAEN,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAhC;AAAA,cAAiDE;AAAjD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAxBD;;GAAMD,sB;UAGsBP,gB;;;KAHtBO,sB;AA0BN,SAASJ,cAAT,EAAyBI,sBAAzB","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport useTabVisibility from 'hooks/useTabVisibility'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n  const { tabVisibleRef } = useTabVisibility()\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (tabVisibleRef.current) {\n        setFast((prev) => prev + 1)\n      }\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [tabVisibleRef])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (tabVisibleRef.current) {\n        setSlow((prev) => prev + 1)\n      }\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [tabVisibleRef])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n"]},"metadata":{},"sourceType":"module"}