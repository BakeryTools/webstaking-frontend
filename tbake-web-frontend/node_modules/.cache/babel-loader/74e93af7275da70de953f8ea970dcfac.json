{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$(),\n    _s11 = $RefreshSig$(),\n    _s12 = $RefreshSig$(),\n    _s13 = $RefreshSig$(),\n    _s14 = $RefreshSig$(),\n    _s15 = $RefreshSig$(),\n    _s16 = $RefreshSig$(),\n    _s17 = $RefreshSig$(),\n    _s18 = $RefreshSig$(),\n    _s19 = $RefreshSig$(),\n    _s20 = $RefreshSig$(),\n    _s21 = $RefreshSig$(),\n    _s22 = $RefreshSig$(),\n    _s23 = $RefreshSig$(),\n    _s24 = $RefreshSig$(),\n    _s25 = $RefreshSig$(),\n    _s26 = $RefreshSig$(),\n    _s27 = $RefreshSig$(),\n    _s28 = $RefreshSig$(),\n    _s29 = $RefreshSig$(),\n    _s30 = $RefreshSig$(),\n    _s31 = $RefreshSig$(),\n    _s32 = $RefreshSig$(),\n    _s33 = $RefreshSig$(),\n    _s34 = $RefreshSig$(),\n    _s35 = $RefreshSig$(),\n    _s36 = $RefreshSig$(),\n    _s37 = $RefreshSig$(),\n    _s38 = $RefreshSig$(),\n    _s39 = $RefreshSig$(),\n    _s40 = $RefreshSig$(),\n    _s41 = $RefreshSig$(),\n    _s42 = $RefreshSig$(),\n    _s43 = $RefreshSig$(),\n    _s44 = $RefreshSig$(),\n    _s45 = $RefreshSig$(),\n    _s46 = $RefreshSig$(),\n    _s47 = $RefreshSig$();\n\nimport { useEffect, useMemo } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useWeb3React } from '@web3-react/core';\nimport { useSelector } from 'react-redux';\nimport { useAppDispatch } from 'state';\nimport { orderBy } from 'lodash';\nimport Nfts from 'config/constants/nfts';\nimport { farmsConfig } from 'config/constants';\nimport { getWeb3NoAccount } from 'utils/web3';\nimport { getBalanceAmount } from 'utils/formatBalance';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport useRefresh from 'hooks/useRefresh';\nimport { filterFarmsByQuoteToken } from 'utils/farmsPriceHelpers';\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync, fetchCakeVaultPublicData, fetchCakeVaultUserData, fetchCakeVaultFees, setBlock } from './actions';\nimport { fetchProfile } from './profile';\nimport { fetchTeam, fetchTeams } from './teams';\nimport { fetchAchievements } from './achievements';\nimport { fetchWalletNfts } from './collectibles';\nimport { getCanClaim } from './predictions/helpers';\nimport { transformPool } from './pools/helpers';\nimport { fetchPoolsStakingLimitsAsync } from './pools';\nimport { fetchFarmUserDataAsync, nonArchivedFarms } from './farms';\nexport const usePollFarmsData = (includeArchive = false) => {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const {\n    slowRefresh\n  } = useRefresh();\n  const web3 = getWeb3NoAccount();\n  const {\n    account\n  } = useWeb3React();\n  useEffect(() => {\n    const farmsToFetch = includeArchive ? farmsConfig : nonArchivedFarms;\n    const pids = farmsToFetch.map(farmToFetch => farmToFetch.pid);\n    dispatch(fetchFarmsPublicDataAsync(pids));\n\n    if (account) {\n      dispatch(fetchFarmUserDataAsync({\n        account,\n        pids\n      }));\n    }\n  }, [includeArchive, dispatch, slowRefresh, web3, account]);\n};\n/**\n * Fetches the \"core\" farm data used globally\n * 251 = CAKE-BNB LP\n * 252 = BUSD-BNB LP\n */\n\n_s(usePollFarmsData, \"GA0abdQx+3VL0XheKTRFc99Dfws=\", false, function () {\n  return [useAppDispatch, useRefresh, useWeb3React];\n});\n\nexport const usePollCoreFarmData = () => {\n  _s2();\n\n  const dispatch = useAppDispatch();\n  const {\n    fastRefresh\n  } = useRefresh();\n  const web3 = getWeb3NoAccount();\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync([251, 252]));\n  }, [dispatch, fastRefresh, web3]);\n};\n\n_s2(usePollCoreFarmData, \"ioW+pQi/3pF1VdJGlRLsvLuQtVc=\", false, function () {\n  return [useAppDispatch, useRefresh];\n});\n\nexport const usePollBlockNumber = () => {\n  _s3();\n\n  const dispatch = useAppDispatch();\n  const web3 = getWeb3NoAccount();\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber();\n      dispatch(setBlock(blockNumber));\n    }, 6000);\n    return () => clearInterval(interval);\n  }, [dispatch, web3]);\n}; // Farms\n\n_s3(usePollBlockNumber, \"DKdeqxp2QYw2p6z8/ErYMRK/Ubo=\", false, function () {\n  return [useAppDispatch];\n});\n\nexport const useFarms = () => {\n  _s4();\n\n  const farms = useSelector(state => state.farms);\n  return farms;\n};\n\n_s4(useFarms, \"40tjDYBLbzKzCIdd0cwm+UIfe9E=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFarmFromPid = pid => {\n  _s5();\n\n  const farm = useSelector(state => state.farms.data.find(f => f.pid === pid));\n  return farm;\n};\n\n_s5(useFarmFromPid, \"TOdL9+Oz8AEj+wmjEA7Olv/caxU=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFarmFromLpSymbol = lpSymbol => {\n  _s6();\n\n  const farm = useSelector(state => state.farms.data.find(f => f.lpSymbol === lpSymbol));\n  return farm;\n};\n\n_s6(useFarmFromLpSymbol, \"TOdL9+Oz8AEj+wmjEA7Olv/caxU=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFarmUser = pid => {\n  _s7();\n\n  const farm = useFarmFromPid(pid);\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : BIG_ZERO,\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : BIG_ZERO,\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : BIG_ZERO,\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : BIG_ZERO\n  };\n}; // Return a farm for a given token symbol. The farm is filtered based on attempting to return a farm with a quote token from an array of preferred quote tokens\n\n_s7(useFarmUser, \"kxbBDHm0i5EJweIp+RPzOgw8PRU=\", false, function () {\n  return [useFarmFromPid];\n});\n\nexport const useFarmFromTokenSymbol = (tokenSymbol, preferredQuoteTokens) => {\n  _s8();\n\n  const farms = useSelector(state => state.farms.data.filter(farm => farm.token.symbol === tokenSymbol));\n  const filteredFarm = filterFarmsByQuoteToken(farms, preferredQuoteTokens);\n  return filteredFarm;\n}; // Return the base token price for a farm, from a given pid\n\n_s8(useFarmFromTokenSymbol, \"40tjDYBLbzKzCIdd0cwm+UIfe9E=\", false, function () {\n  return [useSelector];\n});\n\nexport const useBusdPriceFromPid = pid => {\n  _s9();\n\n  const farm = useFarmFromPid(pid);\n  return farm && new BigNumber(farm.token.busdPrice);\n};\n\n_s9(useBusdPriceFromPid, \"kxbBDHm0i5EJweIp+RPzOgw8PRU=\", false, function () {\n  return [useFarmFromPid];\n});\n\nexport const useBusdPriceFromToken = tokenSymbol => {\n  _s10();\n\n  const tokenFarm = useFarmFromTokenSymbol(tokenSymbol);\n  const tokenPrice = useBusdPriceFromPid(tokenFarm === null || tokenFarm === void 0 ? void 0 : tokenFarm.pid);\n  return tokenPrice;\n};\n\n_s10(useBusdPriceFromToken, \"ycv/ZEOiBreIKK0JuL3rH2ItlMU=\", false, function () {\n  return [useFarmFromTokenSymbol, useBusdPriceFromPid];\n});\n\nexport const useLpTokenPrice = symbol => {\n  _s11();\n\n  const farm = useFarmFromLpSymbol(symbol);\n  const farmTokenPriceInUsd = useBusdPriceFromPid(farm.pid);\n  let lpTokenPrice = BIG_ZERO;\n\n  if (farm.lpTotalSupply && farm.lpTotalInQuoteToken) {\n    // Total value of base token in LP\n    const valueOfBaseTokenInFarm = farmTokenPriceInUsd.times(farm.tokenAmountTotal); // Double it to get overall value in LP\n\n    const overallValueOfAllTokensInFarm = valueOfBaseTokenInFarm.times(2); // Divide total value of all tokens, by the number of LP tokens\n\n    const totalLpTokens = getBalanceAmount(new BigNumber(farm.lpTotalSupply));\n    lpTokenPrice = overallValueOfAllTokensInFarm.div(totalLpTokens);\n  }\n\n  return lpTokenPrice;\n}; // Pools\n\n_s11(useLpTokenPrice, \"+hyoswFTXS+XugOwGpb7EaPFmo4=\", false, function () {\n  return [useFarmFromLpSymbol, useBusdPriceFromPid];\n});\n\nexport const useFetchPublicPoolsData = () => {\n  _s12();\n\n  const dispatch = useAppDispatch();\n  const {\n    slowRefresh\n  } = useRefresh();\n  const web3 = getWeb3NoAccount();\n  useEffect(() => {\n    const fetchPoolsPublicData = async () => {\n      const blockNumber = await web3.eth.getBlockNumber();\n      dispatch(fetchPoolsPublicDataAsync(blockNumber));\n    };\n\n    fetchPoolsPublicData();\n    dispatch(fetchPoolsStakingLimitsAsync());\n  }, [dispatch, slowRefresh, web3]);\n};\n\n_s12(useFetchPublicPoolsData, \"wXP7/5vEIZ/qynMYpAGvmXRZfss=\", false, function () {\n  return [useAppDispatch, useRefresh];\n});\n\nexport const usePools = account => {\n  _s13();\n\n  const {\n    fastRefresh\n  } = useRefresh();\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account));\n    }\n  }, [account, dispatch, fastRefresh]);\n  const {\n    pools,\n    userDataLoaded\n  } = useSelector(state => ({\n    pools: state.pools.data,\n    userDataLoaded: state.pools.userDataLoaded\n  }));\n  return {\n    pools: pools.map(transformPool),\n    userDataLoaded\n  };\n};\n\n_s13(usePools, \"VWrZ+2b3tUz/gcjLdR//y/C6C5s=\", false, function () {\n  return [useRefresh, useAppDispatch, useSelector];\n});\n\nexport const usePoolFromPid = sousId => {\n  _s14();\n\n  const pool = useSelector(state => state.pools.data.find(p => p.sousId === sousId));\n  return transformPool(pool);\n};\n\n_s14(usePoolFromPid, \"NElEvYvoNsaNFrfsmEnHfa4jRII=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFetchCakeVault = () => {\n  _s15();\n\n  const {\n    account\n  } = useWeb3React();\n  const {\n    fastRefresh\n  } = useRefresh();\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(fetchCakeVaultPublicData());\n  }, [dispatch, fastRefresh]);\n  useEffect(() => {\n    dispatch(fetchCakeVaultUserData({\n      account\n    }));\n  }, [dispatch, fastRefresh, account]);\n  useEffect(() => {\n    dispatch(fetchCakeVaultFees());\n  }, [dispatch]);\n};\n\n_s15(useFetchCakeVault, \"pDYnJ+ssV2U9HKPEmASotePCeog=\", false, function () {\n  return [useWeb3React, useRefresh, useAppDispatch];\n});\n\nexport const useCakeVault = () => {\n  _s16();\n\n  const {\n    totalShares: totalSharesAsString,\n    pricePerFullShare: pricePerFullShareAsString,\n    totalCakeInVault: totalCakeInVaultAsString,\n    estimatedCakeBountyReward: estimatedCakeBountyRewardAsString,\n    totalPendingCakeHarvest: totalPendingCakeHarvestAsString,\n    fees: {\n      performanceFee,\n      callFee,\n      withdrawalFee,\n      withdrawalFeePeriod\n    },\n    userData: {\n      isLoading,\n      userShares: userSharesAsString,\n      cakeAtLastUserAction: cakeAtLastUserActionAsString,\n      lastDepositedTime,\n      lastUserActionTime\n    }\n  } = useSelector(state => state.pools.cakeVault);\n  const estimatedCakeBountyReward = useMemo(() => {\n    return new BigNumber(estimatedCakeBountyRewardAsString);\n  }, [estimatedCakeBountyRewardAsString]);\n  const totalPendingCakeHarvest = useMemo(() => {\n    return new BigNumber(totalPendingCakeHarvestAsString);\n  }, [totalPendingCakeHarvestAsString]);\n  const totalShares = useMemo(() => {\n    return new BigNumber(totalSharesAsString);\n  }, [totalSharesAsString]);\n  const pricePerFullShare = useMemo(() => {\n    return new BigNumber(pricePerFullShareAsString);\n  }, [pricePerFullShareAsString]);\n  const totalCakeInVault = useMemo(() => {\n    return new BigNumber(totalCakeInVaultAsString);\n  }, [totalCakeInVaultAsString]);\n  const userShares = useMemo(() => {\n    return new BigNumber(userSharesAsString);\n  }, [userSharesAsString]);\n  const cakeAtLastUserAction = useMemo(() => {\n    return new BigNumber(cakeAtLastUserActionAsString);\n  }, [cakeAtLastUserActionAsString]);\n  return {\n    totalShares,\n    pricePerFullShare,\n    totalCakeInVault,\n    estimatedCakeBountyReward,\n    totalPendingCakeHarvest,\n    fees: {\n      performanceFee,\n      callFee,\n      withdrawalFee,\n      withdrawalFeePeriod\n    },\n    userData: {\n      isLoading,\n      userShares,\n      cakeAtLastUserAction,\n      lastDepositedTime,\n      lastUserActionTime\n    }\n  };\n}; // Profile\n\n_s16(useCakeVault, \"YV6Q9wLle93kMiaCPuN9BNIY1fg=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFetchProfile = () => {\n  _s17();\n\n  const {\n    account\n  } = useWeb3React();\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(fetchProfile(account));\n  }, [account, dispatch]);\n};\n\n_s17(useFetchProfile, \"+HYujYX/SnZ0I8i3/v+l9OV5PuY=\", false, function () {\n  return [useWeb3React, useAppDispatch];\n});\n\nexport const useProfile = () => {\n  _s18();\n\n  const {\n    isInitialized,\n    isLoading,\n    data,\n    hasRegistered\n  } = useSelector(state => state.profile);\n  return {\n    profile: data,\n    hasProfile: isInitialized && hasRegistered,\n    isInitialized,\n    isLoading\n  };\n}; // Teams\n\n_s18(useProfile, \"IKFRbj5HxYVQqavhAzR0F+CGiS4=\", false, function () {\n  return [useSelector];\n});\n\nexport const useTeam = id => {\n  _s19();\n\n  const team = useSelector(state => state.teams.data[id]);\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(fetchTeam(id));\n  }, [id, dispatch]);\n  return team;\n};\n\n_s19(useTeam, \"DyuMdVerOKX5fcfe5TyEmnC8m+o=\", false, function () {\n  return [useSelector, useAppDispatch];\n});\n\nexport const useTeams = () => {\n  _s20();\n\n  const {\n    isInitialized,\n    isLoading,\n    data\n  } = useSelector(state => state.teams);\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(fetchTeams());\n  }, [dispatch]);\n  return {\n    teams: data,\n    isInitialized,\n    isLoading\n  };\n}; // Achievements\n\n_s20(useTeams, \"MG/rX3obHehsmT4LdcT3JsnsVRA=\", false, function () {\n  return [useSelector, useAppDispatch];\n});\n\nexport const useFetchAchievements = () => {\n  _s21();\n\n  const {\n    account\n  } = useWeb3React();\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchAchievements(account));\n    }\n  }, [account, dispatch]);\n};\n\n_s21(useFetchAchievements, \"+HYujYX/SnZ0I8i3/v+l9OV5PuY=\", false, function () {\n  return [useWeb3React, useAppDispatch];\n});\n\nexport const useAchievements = () => {\n  _s22();\n\n  const achievements = useSelector(state => state.achievements.data);\n  return achievements;\n};\n\n_s22(useAchievements, \"YSK51t5rwnyiHZ93Q8BnGfHM9jA=\", false, function () {\n  return [useSelector];\n});\n\nexport const usePriceBnbBusd = () => {\n  _s23();\n\n  const bnbBusdFarm = useFarmFromPid(252);\n  return new BigNumber(bnbBusdFarm.quoteToken.busdPrice);\n};\n\n_s23(usePriceBnbBusd, \"bjYi8xZd8XQhAOGMAQ3jqbWQ3+Y=\", false, function () {\n  return [useFarmFromPid];\n});\n\nexport const usePriceCakeBusd = () => {\n  _s24();\n\n  const cakeBnbFarm = useFarmFromPid(251);\n  return new BigNumber(cakeBnbFarm.token.busdPrice);\n}; // Block\n\n_s24(usePriceCakeBusd, \"E5WhNAo4Xw4nRZacFzMD7GdwxEU=\", false, function () {\n  return [useFarmFromPid];\n});\n\nexport const useBlock = () => {\n  _s25();\n\n  return useSelector(state => state.block);\n};\n\n_s25(useBlock, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useInitialBlock = () => {\n  _s26();\n\n  return useSelector(state => state.block.initialBlock);\n}; // Predictions\n\n_s26(useInitialBlock, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useIsHistoryPaneOpen = () => {\n  _s27();\n\n  return useSelector(state => state.predictions.isHistoryPaneOpen);\n};\n\n_s27(useIsHistoryPaneOpen, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useIsChartPaneOpen = () => {\n  _s28();\n\n  return useSelector(state => state.predictions.isChartPaneOpen);\n};\n\n_s28(useIsChartPaneOpen, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetRounds = () => {\n  _s29();\n\n  return useSelector(state => state.predictions.rounds);\n};\n\n_s29(useGetRounds, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetSortedRounds = () => {\n  _s30();\n\n  const roundData = useGetRounds();\n  return orderBy(Object.values(roundData), ['epoch'], ['asc']);\n};\n\n_s30(useGetSortedRounds, \"jFCo8rqHdnklGdNQF/awTvojkG0=\", false, function () {\n  return [useGetRounds];\n});\n\nexport const useGetCurrentEpoch = () => {\n  _s31();\n\n  return useSelector(state => state.predictions.currentEpoch);\n};\n\n_s31(useGetCurrentEpoch, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetIntervalBlocks = () => {\n  _s32();\n\n  return useSelector(state => state.predictions.intervalBlocks);\n};\n\n_s32(useGetIntervalBlocks, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetBufferBlocks = () => {\n  _s33();\n\n  return useSelector(state => state.predictions.bufferBlocks);\n};\n\n_s33(useGetBufferBlocks, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetTotalIntervalBlocks = () => {\n  _s34();\n\n  const intervalBlocks = useGetIntervalBlocks();\n  const bufferBlocks = useGetBufferBlocks();\n  return intervalBlocks + bufferBlocks;\n};\n\n_s34(useGetTotalIntervalBlocks, \"Tu40sOrNdwBfiHoai7qebXljDAY=\", false, function () {\n  return [useGetIntervalBlocks, useGetBufferBlocks];\n});\n\nexport const useGetRound = id => {\n  _s35();\n\n  const rounds = useGetRounds();\n  return rounds[id];\n};\n\n_s35(useGetRound, \"CPXODwCvtLmu2soXjdA2EEMSl8I=\", false, function () {\n  return [useGetRounds];\n});\n\nexport const useGetCurrentRound = () => {\n  _s36();\n\n  const currentEpoch = useGetCurrentEpoch();\n  const rounds = useGetSortedRounds();\n  return rounds.find(round => round.epoch === currentEpoch);\n};\n\n_s36(useGetCurrentRound, \"cJlTwdlLYEKE4Qc5JxH6Xhb/WXY=\", false, function () {\n  return [useGetCurrentEpoch, useGetSortedRounds];\n});\n\nexport const useGetPredictionsStatus = () => {\n  _s37();\n\n  return useSelector(state => state.predictions.status);\n};\n\n_s37(useGetPredictionsStatus, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetHistoryFilter = () => {\n  _s38();\n\n  return useSelector(state => state.predictions.historyFilter);\n};\n\n_s38(useGetHistoryFilter, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetCurrentRoundBlockNumber = () => {\n  _s39();\n\n  return useSelector(state => state.predictions.currentRoundStartBlockNumber);\n};\n\n_s39(useGetCurrentRoundBlockNumber, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetMinBetAmount = () => {\n  _s40();\n\n  const minBetAmount = useSelector(state => state.predictions.minBetAmount);\n  return useMemo(() => new BigNumber(minBetAmount), [minBetAmount]);\n};\n\n_s40(useGetMinBetAmount, \"0dRfTS7F/4osBkgeEhhyeRmd26g=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetIsFetchingHistory = () => {\n  _s41();\n\n  return useSelector(state => state.predictions.isFetchingHistory);\n};\n\n_s41(useGetIsFetchingHistory, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetHistory = () => {\n  _s42();\n\n  return useSelector(state => state.predictions.history);\n};\n\n_s42(useGetHistory, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetHistoryByAccount = account => {\n  _s43();\n\n  const bets = useGetHistory();\n  return bets ? bets[account] : [];\n};\n\n_s43(useGetHistoryByAccount, \"Yrp7yExhLjDp2kAaHnofs1ZdL7U=\", false, function () {\n  return [useGetHistory];\n});\n\nexport const useGetBetByRoundId = (account, roundId) => {\n  _s44();\n\n  const bets = useSelector(state => state.predictions.bets);\n\n  if (!bets[account]) {\n    return null;\n  }\n\n  if (!bets[account][roundId]) {\n    return null;\n  }\n\n  return bets[account][roundId];\n};\n\n_s44(useGetBetByRoundId, \"l2hU2dIovtccD4bBSsew9DdDw24=\", false, function () {\n  return [useSelector];\n});\n\nexport const useBetCanClaim = (account, roundId) => {\n  _s45();\n\n  const bet = useGetBetByRoundId(account, roundId);\n\n  if (!bet) {\n    return false;\n  }\n\n  return getCanClaim(bet);\n};\n\n_s45(useBetCanClaim, \"9z+oSI36i7aG8TGBwAPV7AACn8o=\", false, function () {\n  return [useGetBetByRoundId];\n});\n\nexport const useGetLastOraclePrice = () => {\n  _s46();\n\n  const lastOraclePrice = useSelector(state => state.predictions.lastOraclePrice);\n  return new BigNumber(lastOraclePrice);\n}; // Collectibles\n\n_s46(useGetLastOraclePrice, \"O9QgRsKM2GZKz/hay3OnQqqlV7g=\", false, function () {\n  return [useSelector];\n});\n\nexport const useGetCollectibles = () => {\n  _s47();\n\n  const {\n    account\n  } = useWeb3React();\n  const dispatch = useAppDispatch();\n  const {\n    isInitialized,\n    isLoading,\n    data\n  } = useSelector(state => state.collectibles);\n  const identifiers = Object.keys(data);\n  useEffect(() => {\n    // Fetch nfts only if we have not done so already\n    if (!isInitialized) {\n      dispatch(fetchWalletNfts(account));\n    }\n  }, [isInitialized, account, dispatch]);\n  return {\n    isInitialized,\n    isLoading,\n    tokenIds: data,\n    nftsInWallet: Nfts.filter(nft => identifiers.includes(nft.identifier))\n  };\n};\n\n_s47(useGetCollectibles, \"+OJP6i7Yx7acr6GgAtxV2TRO7fk=\", false, function () {\n  return [useWeb3React, useAppDispatch, useSelector];\n});","map":{"version":3,"sources":["/Users/danialfajar/Downloads/tbake-web-staking-platform-master/src/state/hooks.ts"],"names":["useEffect","useMemo","BigNumber","useWeb3React","useSelector","useAppDispatch","orderBy","Nfts","farmsConfig","getWeb3NoAccount","getBalanceAmount","BIG_ZERO","useRefresh","filterFarmsByQuoteToken","fetchFarmsPublicDataAsync","fetchPoolsPublicDataAsync","fetchPoolsUserDataAsync","fetchCakeVaultPublicData","fetchCakeVaultUserData","fetchCakeVaultFees","setBlock","fetchProfile","fetchTeam","fetchTeams","fetchAchievements","fetchWalletNfts","getCanClaim","transformPool","fetchPoolsStakingLimitsAsync","fetchFarmUserDataAsync","nonArchivedFarms","usePollFarmsData","includeArchive","dispatch","slowRefresh","web3","account","farmsToFetch","pids","map","farmToFetch","pid","usePollCoreFarmData","fastRefresh","usePollBlockNumber","interval","setInterval","blockNumber","eth","getBlockNumber","clearInterval","useFarms","farms","state","useFarmFromPid","farm","data","find","f","useFarmFromLpSymbol","lpSymbol","useFarmUser","allowance","userData","tokenBalance","stakedBalance","earnings","useFarmFromTokenSymbol","tokenSymbol","preferredQuoteTokens","filter","token","symbol","filteredFarm","useBusdPriceFromPid","busdPrice","useBusdPriceFromToken","tokenFarm","tokenPrice","useLpTokenPrice","farmTokenPriceInUsd","lpTokenPrice","lpTotalSupply","lpTotalInQuoteToken","valueOfBaseTokenInFarm","times","tokenAmountTotal","overallValueOfAllTokensInFarm","totalLpTokens","div","useFetchPublicPoolsData","fetchPoolsPublicData","usePools","pools","userDataLoaded","usePoolFromPid","sousId","pool","p","useFetchCakeVault","useCakeVault","totalShares","totalSharesAsString","pricePerFullShare","pricePerFullShareAsString","totalCakeInVault","totalCakeInVaultAsString","estimatedCakeBountyReward","estimatedCakeBountyRewardAsString","totalPendingCakeHarvest","totalPendingCakeHarvestAsString","fees","performanceFee","callFee","withdrawalFee","withdrawalFeePeriod","isLoading","userShares","userSharesAsString","cakeAtLastUserAction","cakeAtLastUserActionAsString","lastDepositedTime","lastUserActionTime","cakeVault","useFetchProfile","useProfile","isInitialized","hasRegistered","profile","hasProfile","useTeam","id","team","teams","useTeams","useFetchAchievements","useAchievements","achievements","usePriceBnbBusd","bnbBusdFarm","quoteToken","usePriceCakeBusd","cakeBnbFarm","useBlock","block","useInitialBlock","initialBlock","useIsHistoryPaneOpen","predictions","isHistoryPaneOpen","useIsChartPaneOpen","isChartPaneOpen","useGetRounds","rounds","useGetSortedRounds","roundData","Object","values","useGetCurrentEpoch","currentEpoch","useGetIntervalBlocks","intervalBlocks","useGetBufferBlocks","bufferBlocks","useGetTotalIntervalBlocks","useGetRound","useGetCurrentRound","round","epoch","useGetPredictionsStatus","status","useGetHistoryFilter","historyFilter","useGetCurrentRoundBlockNumber","currentRoundStartBlockNumber","useGetMinBetAmount","minBetAmount","useGetIsFetchingHistory","isFetchingHistory","useGetHistory","history","useGetHistoryByAccount","bets","useGetBetByRoundId","roundId","useBetCanClaim","bet","useGetLastOraclePrice","lastOraclePrice","useGetCollectibles","collectibles","identifiers","keys","tokenIds","nftsInWallet","nft","includes","identifier"],"mappings":"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","sourcesContent":["import { useEffect, useMemo } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { orderBy } from 'lodash'\nimport { Team } from 'config/constants/types'\nimport Nfts from 'config/constants/nfts'\nimport { farmsConfig } from 'config/constants'\nimport { getWeb3NoAccount } from 'utils/web3'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useRefresh from 'hooks/useRefresh'\nimport { filterFarmsByQuoteToken } from 'utils/farmsPriceHelpers'\nimport {\n  fetchFarmsPublicDataAsync,\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  fetchCakeVaultPublicData,\n  fetchCakeVaultUserData,\n  fetchCakeVaultFees,\n  setBlock,\n} from './actions'\nimport { State, Farm, Pool, ProfileState, TeamsState, AchievementState, FarmsState } from './types'\nimport { fetchProfile } from './profile'\nimport { fetchTeam, fetchTeams } from './teams'\nimport { fetchAchievements } from './achievements'\nimport { fetchWalletNfts } from './collectibles'\nimport { getCanClaim } from './predictions/helpers'\nimport { transformPool } from './pools/helpers'\nimport { fetchPoolsStakingLimitsAsync } from './pools'\nimport { fetchFarmUserDataAsync, nonArchivedFarms } from './farms'\n\nexport const usePollFarmsData = (includeArchive = false) => {\n  const dispatch = useAppDispatch()\n  const { slowRefresh } = useRefresh()\n  const web3 = getWeb3NoAccount()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const farmsToFetch = includeArchive ? farmsConfig : nonArchivedFarms\n    const pids = farmsToFetch.map((farmToFetch) => farmToFetch.pid)\n\n    dispatch(fetchFarmsPublicDataAsync(pids))\n\n    if (account) {\n      dispatch(fetchFarmUserDataAsync({ account, pids }))\n    }\n  }, [includeArchive, dispatch, slowRefresh, web3, account])\n}\n\n/**\n * Fetches the \"core\" farm data used globally\n * 251 = CAKE-BNB LP\n * 252 = BUSD-BNB LP\n */\nexport const usePollCoreFarmData = () => {\n  const dispatch = useAppDispatch()\n  const { fastRefresh } = useRefresh()\n  const web3 = getWeb3NoAccount()\n\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync([251, 252]))\n  }, [dispatch, fastRefresh, web3])\n}\n\nexport const usePollBlockNumber = () => {\n  const dispatch = useAppDispatch()\n  const web3 = getWeb3NoAccount()\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      dispatch(setBlock(blockNumber))\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [dispatch, web3])\n}\n\n// Farms\n\nexport const useFarms = (): FarmsState => {\n  const farms = useSelector((state: State) => state.farms)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromLpSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : BIG_ZERO,\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : BIG_ZERO,\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : BIG_ZERO,\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : BIG_ZERO,\n  }\n}\n\n// Return a farm for a given token symbol. The farm is filtered based on attempting to return a farm with a quote token from an array of preferred quote tokens\nexport const useFarmFromTokenSymbol = (tokenSymbol: string, preferredQuoteTokens?: string[]): Farm => {\n  const farms = useSelector((state: State) => state.farms.data.filter((farm) => farm.token.symbol === tokenSymbol))\n  const filteredFarm = filterFarmsByQuoteToken(farms, preferredQuoteTokens)\n  return filteredFarm\n}\n\n// Return the base token price for a farm, from a given pid\nexport const useBusdPriceFromPid = (pid: number): BigNumber => {\n  const farm = useFarmFromPid(pid)\n  return farm && new BigNumber(farm.token.busdPrice)\n}\n\nexport const useBusdPriceFromToken = (tokenSymbol: string): BigNumber => {\n  const tokenFarm = useFarmFromTokenSymbol(tokenSymbol)\n  const tokenPrice = useBusdPriceFromPid(tokenFarm?.pid)\n  return tokenPrice\n}\n\nexport const useLpTokenPrice = (symbol: string) => {\n  const farm = useFarmFromLpSymbol(symbol)\n  const farmTokenPriceInUsd = useBusdPriceFromPid(farm.pid)\n  let lpTokenPrice = BIG_ZERO\n\n  if (farm.lpTotalSupply && farm.lpTotalInQuoteToken) {\n    // Total value of base token in LP\n    const valueOfBaseTokenInFarm = farmTokenPriceInUsd.times(farm.tokenAmountTotal)\n    // Double it to get overall value in LP\n    const overallValueOfAllTokensInFarm = valueOfBaseTokenInFarm.times(2)\n    // Divide total value of all tokens, by the number of LP tokens\n    const totalLpTokens = getBalanceAmount(new BigNumber(farm.lpTotalSupply))\n    lpTokenPrice = overallValueOfAllTokensInFarm.div(totalLpTokens)\n  }\n\n  return lpTokenPrice\n}\n\n// Pools\n\nexport const useFetchPublicPoolsData = () => {\n  const dispatch = useAppDispatch()\n  const { slowRefresh } = useRefresh()\n  const web3 = getWeb3NoAccount()\n\n  useEffect(() => {\n    const fetchPoolsPublicData = async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      dispatch(fetchPoolsPublicDataAsync(blockNumber))\n    }\n\n    fetchPoolsPublicData()\n    dispatch(fetchPoolsStakingLimitsAsync())\n  }, [dispatch, slowRefresh, web3])\n}\n\nexport const usePools = (account): { pools: Pool[]; userDataLoaded: boolean } => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const { pools, userDataLoaded } = useSelector((state: State) => ({\n    pools: state.pools.data,\n    userDataLoaded: state.pools.userDataLoaded,\n  }))\n  return { pools: pools.map(transformPool), userDataLoaded }\n}\n\nexport const usePoolFromPid = (sousId: number): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return transformPool(pool)\n}\n\nexport const useFetchCakeVault = () => {\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchCakeVaultPublicData())\n  }, [dispatch, fastRefresh])\n\n  useEffect(() => {\n    dispatch(fetchCakeVaultUserData({ account }))\n  }, [dispatch, fastRefresh, account])\n\n  useEffect(() => {\n    dispatch(fetchCakeVaultFees())\n  }, [dispatch])\n}\n\nexport const useCakeVault = () => {\n  const {\n    totalShares: totalSharesAsString,\n    pricePerFullShare: pricePerFullShareAsString,\n    totalCakeInVault: totalCakeInVaultAsString,\n    estimatedCakeBountyReward: estimatedCakeBountyRewardAsString,\n    totalPendingCakeHarvest: totalPendingCakeHarvestAsString,\n    fees: { performanceFee, callFee, withdrawalFee, withdrawalFeePeriod },\n    userData: {\n      isLoading,\n      userShares: userSharesAsString,\n      cakeAtLastUserAction: cakeAtLastUserActionAsString,\n      lastDepositedTime,\n      lastUserActionTime,\n    },\n  } = useSelector((state: State) => state.pools.cakeVault)\n\n  const estimatedCakeBountyReward = useMemo(() => {\n    return new BigNumber(estimatedCakeBountyRewardAsString)\n  }, [estimatedCakeBountyRewardAsString])\n\n  const totalPendingCakeHarvest = useMemo(() => {\n    return new BigNumber(totalPendingCakeHarvestAsString)\n  }, [totalPendingCakeHarvestAsString])\n\n  const totalShares = useMemo(() => {\n    return new BigNumber(totalSharesAsString)\n  }, [totalSharesAsString])\n\n  const pricePerFullShare = useMemo(() => {\n    return new BigNumber(pricePerFullShareAsString)\n  }, [pricePerFullShareAsString])\n\n  const totalCakeInVault = useMemo(() => {\n    return new BigNumber(totalCakeInVaultAsString)\n  }, [totalCakeInVaultAsString])\n\n  const userShares = useMemo(() => {\n    return new BigNumber(userSharesAsString)\n  }, [userSharesAsString])\n\n  const cakeAtLastUserAction = useMemo(() => {\n    return new BigNumber(cakeAtLastUserActionAsString)\n  }, [cakeAtLastUserActionAsString])\n\n  return {\n    totalShares,\n    pricePerFullShare,\n    totalCakeInVault,\n    estimatedCakeBountyReward,\n    totalPendingCakeHarvest,\n    fees: {\n      performanceFee,\n      callFee,\n      withdrawalFee,\n      withdrawalFeePeriod,\n    },\n    userData: {\n      isLoading,\n      userShares,\n      cakeAtLastUserAction,\n      lastDepositedTime,\n      lastUserActionTime,\n    },\n  }\n}\n\n// Profile\n\nexport const useFetchProfile = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchProfile(account))\n  }, [account, dispatch])\n}\n\nexport const useProfile = () => {\n  const { isInitialized, isLoading, data, hasRegistered }: ProfileState = useSelector((state: State) => state.profile)\n  return { profile: data, hasProfile: isInitialized && hasRegistered, isInitialized, isLoading }\n}\n\n// Teams\n\nexport const useTeam = (id: number) => {\n  const team: Team = useSelector((state: State) => state.teams.data[id])\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchTeam(id))\n  }, [id, dispatch])\n\n  return team\n}\n\nexport const useTeams = () => {\n  const { isInitialized, isLoading, data }: TeamsState = useSelector((state: State) => state.teams)\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(fetchTeams())\n  }, [dispatch])\n\n  return { teams: data, isInitialized, isLoading }\n}\n\n// Achievements\n\nexport const useFetchAchievements = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchAchievements(account))\n    }\n  }, [account, dispatch])\n}\n\nexport const useAchievements = () => {\n  const achievements: AchievementState['data'] = useSelector((state: State) => state.achievements.data)\n  return achievements\n}\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const bnbBusdFarm = useFarmFromPid(252)\n  return new BigNumber(bnbBusdFarm.quoteToken.busdPrice)\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  const cakeBnbFarm = useFarmFromPid(251)\n  return new BigNumber(cakeBnbFarm.token.busdPrice)\n}\n\n// Block\nexport const useBlock = () => {\n  return useSelector((state: State) => state.block)\n}\n\nexport const useInitialBlock = () => {\n  return useSelector((state: State) => state.block.initialBlock)\n}\n\n// Predictions\nexport const useIsHistoryPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\n}\n\nexport const useIsChartPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\n}\n\nexport const useGetRounds = () => {\n  return useSelector((state: State) => state.predictions.rounds)\n}\n\nexport const useGetSortedRounds = () => {\n  const roundData = useGetRounds()\n  return orderBy(Object.values(roundData), ['epoch'], ['asc'])\n}\n\nexport const useGetCurrentEpoch = () => {\n  return useSelector((state: State) => state.predictions.currentEpoch)\n}\n\nexport const useGetIntervalBlocks = () => {\n  return useSelector((state: State) => state.predictions.intervalBlocks)\n}\n\nexport const useGetBufferBlocks = () => {\n  return useSelector((state: State) => state.predictions.bufferBlocks)\n}\n\nexport const useGetTotalIntervalBlocks = () => {\n  const intervalBlocks = useGetIntervalBlocks()\n  const bufferBlocks = useGetBufferBlocks()\n  return intervalBlocks + bufferBlocks\n}\n\nexport const useGetRound = (id: string) => {\n  const rounds = useGetRounds()\n  return rounds[id]\n}\n\nexport const useGetCurrentRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetSortedRounds()\n  return rounds.find((round) => round.epoch === currentEpoch)\n}\n\nexport const useGetPredictionsStatus = () => {\n  return useSelector((state: State) => state.predictions.status)\n}\n\nexport const useGetHistoryFilter = () => {\n  return useSelector((state: State) => state.predictions.historyFilter)\n}\n\nexport const useGetCurrentRoundBlockNumber = () => {\n  return useSelector((state: State) => state.predictions.currentRoundStartBlockNumber)\n}\n\nexport const useGetMinBetAmount = () => {\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\n  return useMemo(() => new BigNumber(minBetAmount), [minBetAmount])\n}\n\nexport const useGetIsFetchingHistory = () => {\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\n}\n\nexport const useGetHistory = () => {\n  return useSelector((state: State) => state.predictions.history)\n}\n\nexport const useGetHistoryByAccount = (account: string) => {\n  const bets = useGetHistory()\n  return bets ? bets[account] : []\n}\n\nexport const useGetBetByRoundId = (account: string, roundId: string) => {\n  const bets = useSelector((state: State) => state.predictions.bets)\n\n  if (!bets[account]) {\n    return null\n  }\n\n  if (!bets[account][roundId]) {\n    return null\n  }\n\n  return bets[account][roundId]\n}\n\nexport const useBetCanClaim = (account: string, roundId: string) => {\n  const bet = useGetBetByRoundId(account, roundId)\n\n  if (!bet) {\n    return false\n  }\n\n  return getCanClaim(bet)\n}\n\nexport const useGetLastOraclePrice = (): BigNumber => {\n  const lastOraclePrice = useSelector((state: State) => state.predictions.lastOraclePrice)\n  return new BigNumber(lastOraclePrice)\n}\n\n// Collectibles\nexport const useGetCollectibles = () => {\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { isInitialized, isLoading, data } = useSelector((state: State) => state.collectibles)\n  const identifiers = Object.keys(data)\n\n  useEffect(() => {\n    // Fetch nfts only if we have not done so already\n    if (!isInitialized) {\n      dispatch(fetchWalletNfts(account))\n    }\n  }, [isInitialized, account, dispatch])\n\n  return {\n    isInitialized,\n    isLoading,\n    tokenIds: data,\n    nftsInWallet: Nfts.filter((nft) => identifiers.includes(nft.identifier)),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}