{"ast":null,"code":"var _jsxFileName = \"/Users/danialfajar/Downloads/tbake-web-staking-platform-master/src/views/Pools/components/PoolCard/StyledCardHeader.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { CardHeader, Heading, Text, Flex, Image } from '@pancakeswap/uikit';\nimport styled from 'styled-components';\nimport { useTranslation } from 'contexts/Localization';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled(CardHeader)`\n  background: ${({\n  isFinished,\n  background,\n  theme\n}) => isFinished ? theme.colors.backgroundDisabled : theme.colors.gradients[background]};\n  border-radius: ${({\n  theme\n}) => `${theme.radii.card} ${theme.radii.card} 0 0`};\n`;\n_c = Wrapper;\n\nconst StyledCardHeader = ({\n  earningTokenSymbol,\n  stakingTokenSymbol,\n  isFinished = false,\n  isAutoVault = false,\n  isStaking = false\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const poolImageSrc = isAutoVault ? `cake-cakevault.svg` : `${earningTokenSymbol}-${stakingTokenSymbol}.svg`.toLocaleLowerCase();\n  const isCakePool = earningTokenSymbol === 'CAKE' && stakingTokenSymbol === 'CAKE';\n  const background = isStaking ? 'bubblegum' : 'cardHeader';\n\n  const getHeadingPrefix = () => {\n    if (isAutoVault) {\n      // vault\n      return t('Auto');\n    }\n\n    if (isCakePool) {\n      // manual cake\n      return t('Manual');\n    } // all other pools\n\n\n    return t('Earn');\n  };\n\n  const getSubHeading = () => {\n    if (isAutoVault) {\n      return t('Automatic restaking');\n    }\n\n    if (isCakePool) {\n      return t('Earn CAKE, stake CAKE');\n    }\n\n    return t('Stake %symbol%', {\n      symbol: stakingTokenSymbol\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    isFinished: isFinished,\n    background: background,\n    children: /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        flexDirection: \"column\",\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          color: isFinished ? 'textDisabled' : 'body',\n          scale: \"lg\",\n          children: `${getHeadingPrefix()} ${earningTokenSymbol}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          color: isFinished ? 'textDisabled' : 'textSubtle',\n          children: getSubHeading()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Image, {\n        src: `/images/pools/${poolImageSrc}`,\n        alt: earningTokenSymbol,\n        width: 64,\n        height: 64\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StyledCardHeader, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n\n_c2 = StyledCardHeader;\nexport default StyledCardHeader;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"StyledCardHeader\");","map":{"version":3,"sources":["/Users/danialfajar/Downloads/tbake-web-staking-platform-master/src/views/Pools/components/PoolCard/StyledCardHeader.tsx"],"names":["React","CardHeader","Heading","Text","Flex","Image","styled","useTranslation","Wrapper","isFinished","background","theme","colors","backgroundDisabled","gradients","radii","card","StyledCardHeader","earningTokenSymbol","stakingTokenSymbol","isAutoVault","isStaking","t","poolImageSrc","toLocaleLowerCase","isCakePool","getHeadingPrefix","getSubHeading","symbol"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { CardHeader, Heading, Text, Flex, Image } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\nconst Wrapper = styled(CardHeader)<{ isFinished?: boolean; background?: string }>`\n  background: ${({ isFinished, background, theme }) =>\n    isFinished ? theme.colors.backgroundDisabled : theme.colors.gradients[background]};\n  border-radius: ${({ theme }) => `${theme.radii.card} ${theme.radii.card} 0 0`};\n`\n\nconst StyledCardHeader: React.FC<{\n  earningTokenSymbol: string\n  stakingTokenSymbol: string\n  isAutoVault?: boolean\n  isFinished?: boolean\n  isStaking?: boolean\n}> = ({ earningTokenSymbol, stakingTokenSymbol, isFinished = false, isAutoVault = false, isStaking = false }) => {\n  const { t } = useTranslation()\n  const poolImageSrc = isAutoVault\n    ? `cake-cakevault.svg`\n    : `${earningTokenSymbol}-${stakingTokenSymbol}.svg`.toLocaleLowerCase()\n  const isCakePool = earningTokenSymbol === 'CAKE' && stakingTokenSymbol === 'CAKE'\n  const background = isStaking ? 'bubblegum' : 'cardHeader'\n\n  const getHeadingPrefix = () => {\n    if (isAutoVault) {\n      // vault\n      return t('Auto')\n    }\n    if (isCakePool) {\n      // manual cake\n      return t('Manual')\n    }\n    // all other pools\n    return t('Earn')\n  }\n\n  const getSubHeading = () => {\n    if (isAutoVault) {\n      return t('Automatic restaking')\n    }\n    if (isCakePool) {\n      return t('Earn CAKE, stake CAKE')\n    }\n    return t('Stake %symbol%', { symbol: stakingTokenSymbol })\n  }\n\n  return (\n    <Wrapper isFinished={isFinished} background={background}>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Flex flexDirection=\"column\">\n          <Heading color={isFinished ? 'textDisabled' : 'body'} scale=\"lg\">\n            {`${getHeadingPrefix()} ${earningTokenSymbol}`}\n          </Heading>\n          <Text color={isFinished ? 'textDisabled' : 'textSubtle'}>{getSubHeading()}</Text>\n        </Flex>\n        <Image src={`/images/pools/${poolImageSrc}`} alt={earningTokenSymbol} width={64} height={64} />\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default StyledCardHeader\n"]},"metadata":{},"sourceType":"module"}