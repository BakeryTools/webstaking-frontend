{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config';\nimport { ethers } from 'ethers';\nimport { Pair, TokenAmount, Token } from '@pancakeswap-libs/sdk';\nimport { getLpContract, getMasterchefContract } from 'utils/contractHelpers';\nimport farms from 'config/constants/farms';\nimport { getAddress, getCakeAddress } from 'utils/addressHelpers';\nimport tokens from 'config/constants/tokens';\nimport pools from 'config/constants/pools';\nimport sousChefABI from 'config/abi/sousChef.json';\nimport { multicallv2 } from './multicall';\nimport { getWeb3WithArchivedNodeProvider } from './web3';\nimport { getBalanceAmount } from './formatBalance';\nimport { BIG_TEN, BIG_ZERO } from './bigNumber';\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods.approve(masterChefContract.options.address, ethers.constants.MaxUint256).send({\n    from: account\n  });\n};\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods.enterStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()).send({\n      from: account,\n      gas: DEFAULT_GAS_LIMIT\n    }).on('transactionHash', tx => {\n      return tx.transactionHash;\n    });\n  }\n\n  return masterChefContract.methods.deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()).send({\n    from: account,\n    gas: DEFAULT_GAS_LIMIT\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\n  return sousChefContract.methods.deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString()).send({\n    from: account,\n    gas: DEFAULT_GAS_LIMIT\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods.deposit().send({\n    from: account,\n    gas: DEFAULT_GAS_LIMIT,\n    value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods.leaveStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()).send({\n      from: account,\n      gas: DEFAULT_GAS_LIMIT\n    }).on('transactionHash', tx => {\n      return tx.transactionHash;\n    });\n  }\n\n  return masterChefContract.methods.withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()).send({\n    from: account,\n    gas: DEFAULT_GAS_LIMIT\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};\nexport const sousUnstake = async (sousChefContract, amount, decimals, account) => {\n  return sousChefContract.methods.withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString()).send({\n    from: account,\n    gas: DEFAULT_GAS_LIMIT\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};\nexport const sousEmergencyUnstake = async (sousChefContract, account) => {\n  return sousChefContract.methods.emergencyWithdraw().send({\n    from: account\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};\nexport const harvest = async (masterChefContract, pid, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods.leaveStaking('0').send({\n      from: account,\n      gas: DEFAULT_GAS_LIMIT\n    }).on('transactionHash', tx => {\n      return tx.transactionHash;\n    });\n  }\n\n  return masterChefContract.methods.deposit(pid, '0').send({\n    from: account,\n    gas: DEFAULT_GAS_LIMIT\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods.deposit('0').send({\n    from: account,\n    gas: DEFAULT_GAS_LIMIT\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods.deposit().send({\n    from: account,\n    gas: DEFAULT_GAS_LIMIT,\n    value: BIG_ZERO\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10);\nconst cakeBnbPid = 251;\nconst cakeBnbFarm = farms.find(farm => farm.pid === cakeBnbPid);\nconst CAKE_TOKEN = new Token(chainId, getCakeAddress(), 18);\nconst WBNB_TOKEN = new Token(chainId, tokens.wbnb.address[chainId], 18);\nconst CAKE_BNB_TOKEN = new Token(chainId, getAddress(cakeBnbFarm.lpAddresses), 18);\n/**\n * Returns the total CAKE staked in the CAKE-BNB LP\n */\n\nexport const getUserStakeInCakeBnbLp = async (account, block) => {\n  try {\n    const archivedWeb3 = getWeb3WithArchivedNodeProvider();\n    const masterContract = getMasterchefContract(archivedWeb3);\n    const cakeBnbContract = getLpContract(getAddress(cakeBnbFarm.lpAddresses), archivedWeb3);\n    const totalSupplyLP = await cakeBnbContract.methods.totalSupply().call(undefined, block);\n    const reservesLP = await cakeBnbContract.methods.getReserves().call(undefined, block);\n    const cakeBnbBalance = await masterContract.methods.userInfo(cakeBnbPid, account).call(undefined, block);\n    const pair = new Pair(new TokenAmount(CAKE_TOKEN, reservesLP._reserve0.toString()), new TokenAmount(WBNB_TOKEN, reservesLP._reserve1.toString()));\n    const cakeLPBalance = pair.getLiquidityValue(pair.token0, new TokenAmount(CAKE_BNB_TOKEN, totalSupplyLP.toString()), new TokenAmount(CAKE_BNB_TOKEN, cakeBnbBalance.amount.toString()), false);\n    return new BigNumber(cakeLPBalance.toSignificant(18));\n  } catch (error) {\n    console.error(`CAKE-BNB LP error: ${error}`);\n    return BIG_ZERO;\n  }\n};\n/**\n * Gets the cake staked in the main pool\n */\n\nexport const getUserStakeInCakePool = async (account, block) => {\n  try {\n    const archivedWeb3 = getWeb3WithArchivedNodeProvider();\n    const masterContract = getMasterchefContract(archivedWeb3);\n    const response = await masterContract.methods.userInfo(0, account).call(undefined, block);\n    return getBalanceAmount(new BigNumber(response.amount));\n  } catch (error) {\n    console.error('Error getting stake in CAKE pool', error);\n    return BIG_ZERO;\n  }\n};\n/**\n * Returns total staked value of active pools\n */\n\nexport const getUserStakeInPools = async (account, block) => {\n  try {\n    const multicallOptions = {\n      web3: getWeb3WithArchivedNodeProvider(),\n      blockNumber: block,\n      requireSuccess: false\n    };\n    const eligiblePools = pools.filter(pool => pool.sousId !== 0).filter(pool => pool.isFinished === false || pool.isFinished === undefined); // Get the ending block is eligible pools\n\n    const endBlockCalls = eligiblePools.map(eligiblePool => ({\n      address: getAddress(eligiblePool.contractAddress),\n      name: 'bonusEndBlock'\n    }));\n    const startBlockCalls = eligiblePools.map(eligiblePool => ({\n      address: getAddress(eligiblePool.contractAddress),\n      name: 'startBlock'\n    }));\n    const endBlocks = await multicallv2(sousChefABI, endBlockCalls, multicallOptions);\n    const startBlocks = await multicallv2(sousChefABI, startBlockCalls, multicallOptions); // Filter out pools that have ended\n\n    const activePools = eligiblePools.filter((eligiblePool, index) => {\n      const endBlock = new BigNumber(endBlocks[index]);\n      const startBlock = new BigNumber(startBlocks[index]);\n      return startBlock.lte(block) && endBlock.gte(block);\n    }); // Get the user info of each pool\n\n    const userInfoCalls = activePools.map(activePool => ({\n      address: getAddress(activePool.contractAddress),\n      name: 'userInfo',\n      params: [account]\n    }));\n    const userInfos = await multicallv2(sousChefABI, userInfoCalls, multicallOptions);\n    return userInfos.reduce((accum, userInfo) => {\n      return accum.plus(new BigNumber(userInfo.amount._hex));\n    }, new BigNumber(0));\n  } catch (error) {\n    console.error('Error fetching staked values:', error);\n    return BIG_ZERO;\n  }\n};","map":{"version":3,"sources":["/Users/danialfajar/Downloads/tbake-web-staking-platform-master/src/utils/callHelpers.ts"],"names":["BigNumber","DEFAULT_GAS_LIMIT","DEFAULT_TOKEN_DECIMAL","ethers","Pair","TokenAmount","Token","getLpContract","getMasterchefContract","farms","getAddress","getCakeAddress","tokens","pools","sousChefABI","multicallv2","getWeb3WithArchivedNodeProvider","getBalanceAmount","BIG_TEN","BIG_ZERO","approve","lpContract","masterChefContract","account","methods","options","address","constants","MaxUint256","send","from","stake","pid","amount","enterStaking","times","toString","gas","on","tx","transactionHash","deposit","sousStake","sousChefContract","decimals","pow","sousStakeBnb","value","unstake","leaveStaking","withdraw","sousUnstake","sousEmergencyUnstake","emergencyWithdraw","harvest","soushHarvest","soushHarvestBnb","chainId","parseInt","process","env","REACT_APP_CHAIN_ID","cakeBnbPid","cakeBnbFarm","find","farm","CAKE_TOKEN","WBNB_TOKEN","wbnb","CAKE_BNB_TOKEN","lpAddresses","getUserStakeInCakeBnbLp","block","archivedWeb3","masterContract","cakeBnbContract","totalSupplyLP","totalSupply","call","undefined","reservesLP","getReserves","cakeBnbBalance","userInfo","pair","_reserve0","_reserve1","cakeLPBalance","getLiquidityValue","token0","toSignificant","error","console","getUserStakeInCakePool","response","getUserStakeInPools","multicallOptions","web3","blockNumber","requireSuccess","eligiblePools","filter","pool","sousId","isFinished","endBlockCalls","map","eligiblePool","contractAddress","name","startBlockCalls","endBlocks","startBlocks","activePools","index","endBlock","startBlock","lte","gte","userInfoCalls","activePool","params","userInfos","reduce","accum","plus","_hex"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { ethers } from 'ethers'\nimport { Pair, TokenAmount, Token } from '@pancakeswap-libs/sdk'\nimport { getLpContract, getMasterchefContract } from 'utils/contractHelpers'\nimport farms from 'config/constants/farms'\nimport { getAddress, getCakeAddress } from 'utils/addressHelpers'\nimport tokens from 'config/constants/tokens'\nimport pools from 'config/constants/pools'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport { multicallv2 } from './multicall'\nimport { getWeb3WithArchivedNodeProvider } from './web3'\nimport { getBalanceAmount } from './formatBalance'\nimport { BIG_TEN, BIG_ZERO } from './bigNumber'\n\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\n    .send({ from: account })\n}\n\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .enterStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStake = async (sousChefContract, amount, decimals = 18, account) => {\n  return sousChefContract.methods\n    .deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousStakeBnb = async (sousChefContract, amount, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({\n      from: account,\n      gas: DEFAULT_GAS_LIMIT,\n      value: new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(),\n    })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .withdraw(pid, new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousUnstake = async (sousChefContract, amount, decimals, account) => {\n  return sousChefContract.methods\n    .withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const sousEmergencyUnstake = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .emergencyWithdraw()\n    .send({ from: account })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const harvest = async (masterChefContract, pid, account) => {\n  if (pid === 0) {\n    return masterChefContract.methods\n      .leaveStaking('0')\n      .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  }\n\n  return masterChefContract.methods\n    .deposit(pid, '0')\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvest = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit('0')\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nexport const soushHarvestBnb = async (sousChefContract, account) => {\n  return sousChefContract.methods\n    .deposit()\n    .send({ from: account, gas: DEFAULT_GAS_LIMIT, value: BIG_ZERO })\n    .on('transactionHash', (tx) => {\n      return tx.transactionHash\n    })\n}\n\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\nconst cakeBnbPid = 251\nconst cakeBnbFarm = farms.find((farm) => farm.pid === cakeBnbPid)\n\nconst CAKE_TOKEN = new Token(chainId, getCakeAddress(), 18)\nconst WBNB_TOKEN = new Token(chainId, tokens.wbnb.address[chainId], 18)\nconst CAKE_BNB_TOKEN = new Token(chainId, getAddress(cakeBnbFarm.lpAddresses), 18)\n\n/**\n * Returns the total CAKE staked in the CAKE-BNB LP\n */\nexport const getUserStakeInCakeBnbLp = async (account: string, block?: number) => {\n  try {\n    const archivedWeb3 = getWeb3WithArchivedNodeProvider()\n    const masterContract = getMasterchefContract(archivedWeb3)\n    const cakeBnbContract = getLpContract(getAddress(cakeBnbFarm.lpAddresses), archivedWeb3)\n    const totalSupplyLP = await cakeBnbContract.methods.totalSupply().call(undefined, block)\n    const reservesLP = await cakeBnbContract.methods.getReserves().call(undefined, block)\n    const cakeBnbBalance = await masterContract.methods.userInfo(cakeBnbPid, account).call(undefined, block)\n\n    const pair: Pair = new Pair(\n      new TokenAmount(CAKE_TOKEN, reservesLP._reserve0.toString()),\n      new TokenAmount(WBNB_TOKEN, reservesLP._reserve1.toString()),\n    )\n    const cakeLPBalance = pair.getLiquidityValue(\n      pair.token0,\n      new TokenAmount(CAKE_BNB_TOKEN, totalSupplyLP.toString()),\n      new TokenAmount(CAKE_BNB_TOKEN, cakeBnbBalance.amount.toString()),\n      false,\n    )\n\n    return new BigNumber(cakeLPBalance.toSignificant(18))\n  } catch (error) {\n    console.error(`CAKE-BNB LP error: ${error}`)\n    return BIG_ZERO\n  }\n}\n\n/**\n * Gets the cake staked in the main pool\n */\nexport const getUserStakeInCakePool = async (account: string, block?: number) => {\n  try {\n    const archivedWeb3 = getWeb3WithArchivedNodeProvider()\n    const masterContract = getMasterchefContract(archivedWeb3)\n    const response = await masterContract.methods.userInfo(0, account).call(undefined, block)\n\n    return getBalanceAmount(new BigNumber(response.amount))\n  } catch (error) {\n    console.error('Error getting stake in CAKE pool', error)\n    return BIG_ZERO\n  }\n}\n\n/**\n * Returns total staked value of active pools\n */\nexport const getUserStakeInPools = async (account: string, block?: number) => {\n  try {\n    const multicallOptions = {\n      web3: getWeb3WithArchivedNodeProvider(),\n      blockNumber: block,\n      requireSuccess: false,\n    }\n    const eligiblePools = pools\n      .filter((pool) => pool.sousId !== 0)\n      .filter((pool) => pool.isFinished === false || pool.isFinished === undefined)\n\n    // Get the ending block is eligible pools\n    const endBlockCalls = eligiblePools.map((eligiblePool) => ({\n      address: getAddress(eligiblePool.contractAddress),\n      name: 'bonusEndBlock',\n    }))\n    const startBlockCalls = eligiblePools.map((eligiblePool) => ({\n      address: getAddress(eligiblePool.contractAddress),\n      name: 'startBlock',\n    }))\n    const endBlocks = await multicallv2(sousChefABI, endBlockCalls, multicallOptions)\n    const startBlocks = await multicallv2(sousChefABI, startBlockCalls, multicallOptions)\n\n    // Filter out pools that have ended\n    const activePools = eligiblePools.filter((eligiblePool, index) => {\n      const endBlock = new BigNumber(endBlocks[index])\n      const startBlock = new BigNumber(startBlocks[index])\n\n      return startBlock.lte(block) && endBlock.gte(block)\n    })\n\n    // Get the user info of each pool\n    const userInfoCalls = activePools.map((activePool) => ({\n      address: getAddress(activePool.contractAddress),\n      name: 'userInfo',\n      params: [account],\n    }))\n    const userInfos = await multicallv2(sousChefABI, userInfoCalls, multicallOptions)\n\n    return userInfos.reduce((accum: BigNumber, userInfo) => {\n      return accum.plus(new BigNumber(userInfo.amount._hex))\n    }, new BigNumber(0))\n  } catch (error) {\n    console.error('Error fetching staked values:', error)\n    return BIG_ZERO\n  }\n}\n"]},"metadata":{},"sourceType":"module"}